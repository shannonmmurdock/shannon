<apex:page sidebar="false" controller="cg.SDriveController" action="{!validate}" extensions="cg.SDriveControllerExtension">
    <apex:outputPanel rendered="true">        
        
        <apex:includeScript value="{!URLFOR($Resource.cg__sources,  'jquery/jquery.min.js')}" />
        <apex:stylesheet value="{!URLFOR($Resource.sources, 'font-awesome/css/font-awesome.min.css') }" />
        
        <!-- JQUERY UI -->
        <apex:stylesheet value="{!URLFOR($Resource.sources, 'jquery-ui/jquery-ui.min.css') }" />
        <apex:includeScript value="{!URLFOR($Resource.cg__sources,  'jquery-ui/jquery-ui.min.js')}" />
        <!-- JS TREE 3.3.2 -->
        <apex:stylesheet value="{!URLFOR($Resource.sources, 'jstree/themes/default/style.min.css') }" />
        <apex:includeScript value="{!URLFOR($Resource.cg__sources,  'jstree/jstree.min.js')}" />
        <!-- Clipboard -->
        <apex:includeScript value="{!URLFOR($Resource.cg__sources,  'clipboard/clipboard.min.js')}" />
        <!-- MASONRY & IMAGESLOADED -->
        <apex:includeScript value="{!URLFOR($Resource.cg__sources,  'Masonry/masonry.pkgd.min.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.cg__sources,  'imagesloaded/imagesloaded.pkgd.min.js')}" />
        
        <apex:includeScript value="/soap/ajax/15.0/connection.js" />
        <apex:includeScript value="/soap/ajax/15.0/apex.js" />

        <apex:form >
            <apex:actionFunction name="loadFoldersDataAF" action="{!loadJsTreeData}" reRender="jsTreePanel"></apex:actionFunction>
            <apex:actionFunction name="loadFolderItems" action="{!changeFolder}" rerender="FileList" status="processStatus">
                <apex:param name="objectId" assignTo="{!objectIdAT}" value="" />
            </apex:actionFunction>
            <apex:actionFunction name="reloadFolderItems" action="{!reloadFolderItems}" rerender="FileList" status="processStatus" />
            <apex:actionFunction name="clearPasteAndReloadFolderItems" action="{!clearPasteAndReloadFolderItems}" rerender="FileList" status="processStatus" />
        </apex:form>
        
        
        <style>
            .ui-dialog-content input[type="text"],
            .ui-dialog-content textarea     { width: 100%; box-sizing: border-box; }
            
            a.standart-link                 { text-decoration: none;color: #005b99; font-weight: bold; }
            a.standart-link:hover           { text-decoration: underline;color: #2183c5; }
            a.btn-link, a.btn-link:hover    { text-decoration: none; font-weight: bold;}
            
            .btn-dropdown                   { position: relative; display: inline-block; vertical-align: top;}
            .btn-dropdown > .btn.btn-dropdown-left              { border-radius: 3px 0 0 3px; border-right: none; }
            .btn-dropdown > .btn.btn-dropdown-right             { border-radius: 0px 3px 3px 0; margin-left: -3px !important;}
            .btn-seperator                  { display: inline-block; color: #628f9b; margin: 6px 3px; height: 12px;}
            
            #contentTable                   { width: 100%}
            #filesCell, #foldersCell        { box-sizing: border-box; margin: 0; padding: 0; vertical-align: top;}
            #filesCell                      { min-width: 680px;}
            #foldersCell                    { width: 20%; padding-right:10px;}
            #foldersCell .bPageBlock        { min-height: 160px;}
            
            .ui-resizable-e                 { width: 10px; right: 0px;}
            .ui-resizable-e:hover           { background-color: #e8e8e8;}

            .datePicker,.fewerMore          { display: none }
            .searchBoxWrapper               { width: 149px; height: 28px; background-image:url({!$Resource.SearchBox}); background-repeat: no-repeat; padding: 0; margin: -2px 1px 0 0; position: relative; float: right}
            .searchBoxWrapper .inputBoxSearchStyle,
            .searchBoxWrapper .searchbox_submit         { position: absolute; border: 0;background-color: transparent;top: 4px;height: 20px; }
            .searchBoxWrapper .inputBoxSearchStyle      { left: 9px; width: 110px}
            .searchBoxWrapper .searchbox_submit         { left: 125px; width: 16px; cursor: pointer; cursor: hand}
            .paginationBottom               { background-color: #eee; margin: -1px 0 -1px 0; text-align: right; height: initial;}
            .paginationStyle .btn           { display: inline-block; padding: 3px 5px; box-sizing: border-box; height: 20px; vertical-align: middle; font-size: 11px;}
            .paginationStyle select.btn     { padding: 3px 0;}
            .paginationStyle select.btnSelected option      { background-color: #fff; color: #222;}
            .paginationStyle .btn.btnSelected { background: none; background-color: #2dabd4 !important; color: #fff; border: 1px solid #107fa2;}
            .datePicker                     { z-index: 9999;position: absolute;top: 0;left: 0;width: 17em;background-color: #b7c6b2;border-bottom: 1px solid #000;border-right: 1px solid #000;margin: 0;padding: 1px 1px 2px 2px}
            
            .sdriveToolBar                      { padding: 5px 10px; background: #bedde7;}
            .sdriveToolBar .btn                 { color: #0b3550;}
            .sdriveToolBar .btn i               { color: #005b99;}
            .sdriveToolBar .btn,
            .sdriveToolBar .btnDisabled         { padding: 7px; text-decoration: none; display: inline-block; line-height: 11px; font-size: 11px; height: 26px !important; box-sizing: border-box; margin: 0px;}
            .sdriveToolBar .btnDisabled         { pointer-events: none; color: #afafaf;}
            .sdriveToolBar .btn.removeButton    { color: red}
            .toggleViewToolbar label.ui-checkboxradio-checked.btn i {color: #fff;}
            
            .actionStatusContainer              { position: fixed; top: 0; left: 0; width: 100%; height: 100%; /*background: rgba(255,255,255,0.3);*/ z-index: 9999;}
            .actionStatusClass                  { border: 1px solid #F1D031;background-color: #FFFFA3; color: #555;  position: fixed; font-size: 14px; right: 15px; bottom: 5px; width: 200px; text-align: center; line-height: 30px; height: 30px; padding: 3px 15px; border-radius: 3px; z-index: 9999; opacity: 0.9; -webkit-box-shadow: 0px 0px 8px 2px rgba(0, 0, 0, 0.25); -moz-box-shadow: 0px 0px 8px 2px rgba(0, 0, 0, 0.25); box-shadow: 0px 0px 8px 2px rgba(0, 0, 0, 0.25);}
            #zipAndDownloadStatusPanel          { display: none; bottom: 50px; border: 1px solid #2bad0b; background-color: #24b500; color: #fff;}
            
            .ui-state-error     { margin: 0 0 4px 0; color: #c30f00; padding: 10px 0; min-height: 24px; }
            .ui-state-error i   { color:red;  }
            .dialog-icon        { width: 30px; display: inline-block; vertical-align: middle; margin: 0 20px 0 10px; }
            .dialog-text        { width: 100%; margin-right: -70px; padding-right: 70px; display: inline-block; vertical-align: middle; box-sizing: border-box;}
            .dialog-p           { overflow: hidden; }
            .remove-margin      { margin: 0px; }
            #confirmDialog i    { color: #3ebfff; }
            #errDialog i        { color: red; }
            div[aria-describedby="errDialog"] .ui-widget-header { background-color: #c50101;}
            .infoPanel          { border: 1px dotted #90c5d6 !important; font-size: 13px; background-color: #eff7f9; padding: 10px 10px 10px 15px !important; color: #465f6b !important;}
            .infoPanel i        { color: #1d8aad; font-size: 18px;}
            
            .ui-progressbar     { position: relative;}
            .progress-label     { position: absolute; left: 50%; top: 4px; font-weight: bold; text-shadow: 1px 1px 0 #fff; width: 100px; margin-left: -50px; text-align: center; }

            .pageBlockTitle             { color: #1f1f1f; font-size: 17px; font-family: Arial,Helvetica,sans-serif; font-weight: bold; padding: 13px 0 8px 0px; border-bottom: 1px solid #ccc;}
            #uploadPanel.ui-dialog-content.ui-widget-content    { padding-right: 0; padding-left: 0;}
            
            table.list tr.dataRow           { height: 1px;}
            table.list td.dataCell          { position: relative; height: 100%; padding: 2px;}
            table.list td.dataCell.list-column { vertical-align: middle !important;}
            .ellipsis-container             { position: relative;}
            .ellipsis                       { position: absolute; width: 100%; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; top: 50%; height: 16px; margin-top: -8px;}
            .break-word                     {     overflow-wrap: break-word; word-wrap: break-word;}
            .ui-tooltip                     { max-width: none; }
            
            .list-select-label                  { cursor: pointer; position: relative;display: block; min-height: 100%; height: auto !important; height: 100%; }
            .list-select-label:hover            { background-color: #aabbcc;}
            .list-select-label .file-checkbox   { margin: -6px 0 0 -7px; top: 50%; left: 50%; position: absolute; cursor: pointer;}
            
            
            /* FROM ATTACHMENT */
            div                             { box-sizing: border-box;}
            .right                          { float: right; }
            
            .fewerMore                      { display: none;}
            .datePicker                     { z-index: 9999; position: absolute; display: none; top: 0; left: 0; width: 17em; background-color: #b7c6b2; border-bottom: 1px solid #000; border-right: 1px solid #000; margin: 0; padding: 1px 1px 2px 2px; }
            
            a.nonderline                    { text-decoration: none;}
            a.nonderline:hover              { text-decoration: none;}
            
            .paginationStyleTop             { float:right;  padding-top:5px; }
            .paginationStyleBottom          { text-align: right; padding-top: 3px; }
            
            .ui-dialog-content input[type="text"],
            .ui-dialog-content textarea     { width: 100%; }
            
            .actionStatusContainer          { position: fixed; top: 0; left: 0; width: 100%; height: 100%; /*background: rgba(255,255,255,0.3); */z-index: 9999;}
            .actionStatusClass              { border:1px solid #a2a200;background-color:#ffff5b;color:#352800;position:fixed;font-size:15px;left:50%;bottom:50px;width:250px;margin-left:-100px;text-align:center;line-height:30px;height:47px;padding:7px 15px;border-radius:9px;z-index:9999;opacity:.9;-webkit-box-shadow:0 0 8px 2px rgba(0,0,0,.4);box-shadow:0 0 8px 2px rgba(0,0,0,.4)}
            .breadcrumbStyle                { display: block; padding: 5px 9px; background-color: ##f8f8f8; border: 1px solid #ccc; vertical-align: middle; margin: 0; border-top-left-radius: 3px; border-top-right-radius: 3px; min-height: 25px; position: relative;}
            .breadcrumbStyle.top            { border-bottom: none;}
            .paginationTop                  { float: right; padding: 1px 0 0 6px;}
            .paginationBottom               { background-color: #eee; margin: -1px 0 -1px 0; text-align: right; height: initial;}
            .paginationBottom.breadcrumbStyle   { border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px;}
            .paginationStyle .btn           { display: inline-block; padding: 3px 5px; box-sizing: border-box; height: 20px; vertical-align: middle; font-size: 11px;}
            .paginationStyle select.btn     { padding: 3px 0;}
            .paginationStyle 
            select.btnSelected option       { background-color: #fff; color: #222;}
            .paginationStyle .btn.btnSelected { background: none; background-color: #2dabd4 !important; color: #fff; border: 1px solid #107fa2;}
            
            .ui-state-error                 { margin: 0 0 4px 0; color: #c30f00; padding: 10px 0; min-height: 24px; }
            .ui-state-error i               { color:red;  }
            .dialog-icon                    { width: 30px; display: inline-block; vertical-align: middle; margin: 0 20px 0 10px; }
            .dialog-text                    { width: 100%; margin-right: -70px; padding-right: 70px; display: inline-block; vertical-align: middle; box-sizing: border-box;}
            .dialog-p                       { overflow: hidden; }
            .remove-margin                  { margin: 0px; }
            #confirmDialog i                { color: #3ebfff; }
            #errDialog i                    { color: red; }
            div[aria-describedby="errDialog"] .ui-widget-header { background-color: #c50101;}
            .infoPanel                      { border: 1px dotted #90c5d6 !important; font-size: 13px; background-color: #eff7f9; padding: 10px 10px 10px 15px !important; color: #465f6b !important;}
            .infoPanel i                    { color: #1d8aad; font-size: 18px;}
            
            td.list-column.selected         { background: #c5e3ec;}
            
            button.actionMenuBtn            { padding: 3px 5px; line-height: 12px; font-family: Arial,Helvetica,sans-serif;}
            ul.actionMenu                   { list-style-type: none; display: none; background-color: #fff; border: 1px solid #888; padding: 0; margin: -1px 0 0 0; position: absolute; min-width: 114px; 
            border-radius: 1px; z-index: 9; box-shadow: 0px 2px 2px 0px rgba(0,0,0,0.2), 0px 4px 10px 2px rgba(0,0,0,0.2); white-space: nowrap;}
            ul.actionMenu *                 { box-sizing: border-box;}
            ul.actionMenu li                { margin: 0; padding: 0; display:block; text-align: left;}
            ul.actionMenu li a              { height: 24px; display: block; width: 100%; padding: 4px 30px 4px 8px; text-decoration: none;}
            ul.actionMenu li a:hover        { background-color: #19f; color: #fff; border-top: 1px dotted #1a79c1; border-bottom: 1px dotted #1a79c1;}
            ul.actionMenu li.menu-seperator { text-align: center; color: #cecece; background-color: #eee;}
            
            ul.actionMenu.card-action-menu  { background-color: #edf1f5; top: 24px; right: 1px; border: 1px solid #388db3;}
            ul.actionMenu.card-action-menu li a         { color: #142e3a; }
            ul.actionMenu.card-action-menu li a:hover   { color: #fff; background: #ff9e09; border-top: 1px dotted #c77a04; border-bottom: 1px dotted #c77a04;}
            ul.actionMenu.card-action-menu 
            li.card-action-menu-header      { background-color: #64b3d6; color: #f3fbff; text-align: center !important; font-size: 10px; font-weight: bold; padding: 3px !important;}
            ul.actionMenu.card-action-menu 
            li.menu-seperator               { color: #acbfc7; background-color: #dce3e6; }
            
            #selectionMenu                  { }
            .card-toolbar-btn-container     { position: relative; height: 30px; display: inline;}
            a.card-toolbar-btn.btn          { padding: 5px 8px; display: inline-block; margin: 0; height: 14px; line-height: 14px; font-size: 12px; font-weight: normal;}
            
            ul#sortByMenu li a              { padding-left: 30px;}
            .sort-field-mark                { position: absolute; left: 6px; padding-top: 5px;}
            
            .card-tool-buttons              { padding: 4px 9px; }           
            
            .toggleViewToolbar              { display:inline-block; float: right;}
            .toggleViewToolbar label        { padding: 5px; margin: 0px; color: #333; border: 1px solid #b5b5b5; border-bottom-color: #7f7f7f; background: #e8e8e9 url(/img/alohaSkin/btn_sprite.png) repeat-x right top; font-size: .9em; border-radius: 3px; height: 10px;}
            .toggleViewToolbar 
            label.ui-checkboxradio-checked  { border: 1px solid #177c9c;background: #1797c0 url(images/ui-bg_highlight-soft_30_1797c0_1x100.png) 50% 50% repeat-x;color: #fff;}
            table.toggleViewToolbarComp     { border-spacing: 0px;}
            .toggleViewToolbarComp td       { }
            .toggleViewToolbar .card-view-btn { background: url("{!URLFOR($Resource.sources, 'file-icons/card_icon.png')}") no-repeat; width: 14px; height: 12px; margin-top: -1px; display: block;}
            .toggleViewToolbar .card-view-btn.blue { background: url("{!URLFOR($Resource.sources, 'file-icons/card_icon_b.png')}")}
            .toggleViewToolbar label.ui-checkboxradio-checked
            .card-view-btn { background: url("{!URLFOR($Resource.sources, 'file-icons/card_icon_w.png')}") no-repeat;}
            
            .thumbnail-frame                { display: block; max-width: 122px; max-height: 102px; background-color: #e6e5e3; border: 1px solid #d4d4d4; position: relative; overflow: hidden;}
            .thumbnail-frame.folder         { background-color: transparent; border: none;}
            .thumbnail-frame.folder .thumbnail-image { box-shadow: none;}
            .thumbnail-image                { max-width: 120px; max-height: 100px; box-shadow: 0px 0px 8px 1px rgba(0, 0, 0, 0.31);}
            .preview-btn-for-thumbnail      { position: absolute; top: 0; bottom: 0; left: 0; right: 0; background: rgba(255,255,255,0.4); visibility: hidden; opacity: 0; transition: visibility 0s linear 0.2s, opacity 0.2s linear; }
            .thumbnail-frame:hover
            .preview-btn-for-thumbnail      { visibility: visible; opacity: 0.7; transition-delay:0s; }
            .preview-btn-for-thumbnail i    { position: absolute; top: 50%; bottom: 0; left: 0; right: 0;}
            
            .card-grid-container            { background-color: #f8f8f8; border: 1px solid #ccc; padding: 5px;}
            #card-grid:after                { content: ''; display: block; clear: both; }
            .card-item                      { float: left; min-height: 30px; padding: 6px; box-sizing: border-box; }
            .card-item-content              { background-color: #ffffff; padding: 0 0 8px 0;     box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.3), 0 4px 13px 0 rgba(0, 0, 0, 0.19);}
            .card-item-content:hover        { background-color: #cad9e8; box-shadow: 0 2px 8px 0 rgba(0, 36, 76, 0.7), 0 8px 20px 0 rgba(0, 45, 82, 0.3); outline: 1px solid #4990ad;}
            .card-item .selected.card-item-content { background-color: #015892; background-color: #566775; background-color: #215ba0; background-color: #757e82; outline: 1px solid #46575f; color: #fff;}
            
            .card-image-cotainer            { position: relative; background-color: #e6e5e3; border-bottom: 1px solid #d4d4d4; text-align: center; min-height: 40px; max-height: 400px; overflow: hidden;}
            .card-thumbnail-img             { width: 100%; }
            
            .card-item-content .card-select-label           { opacity: 0; visible: hidden; }
            .card-item-content:hover .card-select-label,
            .card-item-content.selected .card-select-label  { opacity: 1; visible: visible;}
            .card-select-label              { position:absolute; top:0px; left:0px; width:40px; height:48px; box-sizing:border-box; cursor:pointer; cursor:hand; padding:6px 4px; background:rgba(0, 0, 0, 0.6); border-radius:0 0 50px 0; z-index:4; text-align:left;}
            .card-select-label input        { cursor: pointer; cursor: hand; width: 15px; height: 15px; }
            
            .card-image-cotainer a.card-preview-btn,
            .thumbnail-frame a.card-preview-btn     { visibility: hidden; opacity: 0; transition: visibility 0s linear 0.2s, opacity 0.2s linear; }
            .card-image-cotainer:hover a.card-preview-btn,
            .thumbnail-frame:hover a.card-preview-btn { visibility: visible; opacity: 1; transition-delay:0s; }
            a.card-preview-btn              { position: absolute; bottom: 0px; top: 0px; left: 0px; right: 0px; width: 100%; text-decoration: none; background: rgba(255, 255, 255, 0.3); font-weight: bold;  color: #e3f2ff; text-shadow: 0 1px 0 #000, 1px 0px 0 #000, 0px 0px 2px #000;}
            a.card-preview-btn:hover        { text-decoration: none; color: #e3f2ff;}        
            a.card-preview-btn i            { font-size: 24px;}
            .card-preview-btn-inside        { position: absolute; top: 50%; left: 50%; margin: -12px 0 0 -12px;}
            
            .card-content-type              { font-size: 10px; margin-top: -3px; padding-left: 36px; display: block;}
            .card-meta-data                 { width: 100%; padding: 6px 8px; position: relative;}
            .card-meta-data .ellipsis       { display: block;}
            .card-meta-icon                 { position: absolute; top: -8px; left: 8px; }
            .card-meta-name                 { padding: 12px 0px 2px 0px; display: block; font-size: 12px; position: relative; height: 25px;}
            .card-meta-name-span            { top: 24px;}
            .card-item-toolbar              { padding: 12px 8px 2px 8px; position: relative;  }
            .card-item-toolbar:after        { content: ''; display: block; clear: both;}
            .card-item-toolbar a.card-item-btn.btn { padding: 5px; margin: 1px; float: left; background: #439ac1; border-color: #388db3; color: #fff; border-radius: 1px;}
            .card-item-toolbar a.card-item-btn.btn:hover { background: #ffaa09; border-color: #dc9510;}
            .card-item-toolbar a.card-item-btn.btn.menu-open { background: #ffaa09; border-color: #dc9510;}
            .card-item-toolbar a.btn.right  { float: right}
            .card-item-toolbar a.btn i      { vertical-align: -10%;}
            
            .list-item-toolbar                              { width: 75px; position: relative;}
            .list-item-toolbar a.list-item-btn.btn          { padding: 5px; margin: 0 1px 0 0; float: left; width: 22px; box-sizing: border-box; color: #294a58;}
            .list-item-toolbar a.list-item-btn.btn.right    { float: right;}
            .list-item-toolbar a.list-item-btn.btn.menu-open    { background-position: right -60px; border-color: #585858; border-bottom-color: #939393;}
            .list-item-toolbar ul.actionMenu                { top: 23px;}
            a.list-item-btn i.fa.fa-search-plus         { margin: -1px -2px 1px;}
            
            
            .card-detail { width: 600px; min-height: 400px; }
            .grid-item-1    .card-item{width: 100%;}
            .grid-item-2    .card-item{width: 50%;}
            .grid-item-3    .card-item{width: 33.3%;}
            .grid-item-4    .card-item{width: 25%;}
            .grid-item-5    .card-item{width: 20%;}
            .grid-item-6    .card-item{width: 16.6%;}
            .grid-item-7    .card-item{width: 14.2%;}
            .grid-item-8    .card-item{width: 12.5%;}
            .grid-item-9    .card-item{width: 11.1%;}
            .grid-item-10   .card-item{width: 10%;}
            .grid-item-11   .card-item{width: 9.09%;}
            .grid-item-12   .card-item{width: 8.33%;}
            .grid-item-13   .card-item{width: 7.69%;}
            .grid-item-14   .card-item{width: 7.14%;}
            .grid-item-15   .card-item{width: 6.666%;}
            

            .ui-dialog .ui-dialog-content            { margin-right: 1px; width: 100% !important; height: initial !important;}
            
            #previewPanel                           { padding: 10px 18px; }
            .preview-panel .ui-widget-header        { background-color: rgba(0, 163, 210, 1); color: #fff; font-size: 16px; border: none; }
            .preview-panel .ui-dialog-titlebar      { line-height: 20px; border-top-left-radius: 3px; border-top-right-radius: 3px;border-bottom-right-radius: 0px;border-bottom-left-radius: 0px;}
            .preview-panel .previewPanelImgCell     { background-color: #e6e5e3; text-align: center; min-width: 40%; vertical-align: middle; position: relative; height: 440px; padding: 10px; 
                                                    border-radius: 3px; border: 1px solid #dadada; box-shadow: inset 0px 0px 20px 7px rgba(167, 167, 167, 0.26);} 
            .preview-panel #preview-img             { box-shadow: 0px 0px 8px 2px rgba(0, 0, 0, 0.31);}
            .preview-panel #preview-img.portrait    { height: 100%; width: auto;}
            .preview-panel #preview-img.landscape   { height: auto; width: 100%;}
            .preview-panel #preview-img.without-shadow  { box-shadow: none; } 
            .preview-panel .ui-dialog-titlebar-close    { padding: 10px; right: 7px; top: 17px;}
            .preview-panel .preview-title       { font-size: 14px; }
            .preview-property-table td          { vertical-align: bottom; padding: 13px 0 2px 4px; border-bottom: 1px solid #ddd;}
            .preview-property-label             { font-style: italic; font-size: 13px; color: #555; width: 140px;} 
            .preview-property-value             { font-size: 16px; color: #111;}
            .video-player                       { width: 650px; height: 490px; border: 1px solid #000;}
            
            
            .details-toolbar                    { border-top: 1px solid #ccc;  padding-top: 10px; margin-top: 10px; text-align: right;}
            .details-toolbar a.btn              { padding: 7px;display: inline-block; font-size: 11px;}
            
            /* GRID VIEW  */
            .grid-view .card-thumbnail-img      { max-width: 100%; width: auto; max-height: 100%;position: absolute; left: 0; right: 0; top: 0; bottom: 0; margin: auto; box-shadow: 0px 0px 8px 1px rgba(0, 0, 0, 0.31);}
            .grid-view .card-thumbnail-img.folder-img      { box-shadow: none;}
            .grid-view .card-image-cotainer     { height: 150px;}
            .grid-view .card-item-content       { background-color: #e6f0f5; padding: 0 0 8px 0; box-shadow: none; border: 1px solid #ccc; }
            
            .alert-box                          { color: #fff; display: none; padding: 8px 10px; border-radius: 5px; border: 1px solid #fff; position: fixed; bottom: 20px; width: 600px; left: 50%; margin-left: -300px; font-size: 14px;}
            .alert-box p                        { margin: 0;}
            .alert-box i                        { vertical-align: sub; padding: 5px}
            .alert-box.success                  { background-color: #118411; background: repeating-linear-gradient( 45deg, #118411, #118411 10px, #127912 10px, #107913 20px ); border: 2px solid #0a580b;}
            .alert-box.fail                     { background: repeating-linear-gradient( 45deg, #b52e2e, #b52e2e 10px, #a22929 10px, #a22f2f 20px ); border: 2px solid #8a1f1f;}
            .alert-box.info                     { background: repeating-linear-gradient( 45deg, #1361af, #1361af 10px, #195fa5 10px, #195fa5 20px ); border: 2px solid #08539e;}
            
            .copy-tooltip                       {background: #333; color: #fff; border: 1px solid #000 !important; border-radius: 3px; box-shadow: none;}
            .copy-tooltip:after {width: 20px;height: 20px;margin-left: -10px;content: "";top: -3px;background: #333;position: absolute;left: 50%;-webkit-transform: 
            rotate(45deg);-ms-transform: rotate(45deg);transform: rotate(45deg);z-index: -1;}
        </style>
        <script>
        var isValid = function(){var t=/^[^\\/:\*\?"<>\|~]+$/,n=/^\./,r=/^\ /,e=/^(nul|prn|con|lpt[0-9]|com[0-9])(\.|$)/i;return function(i){return t.test(i)&&!n.test(i)&&!e.test(i)&&!r.test(i)}}(); 
        function copyToClipboard(e){var t,n,o="_hiddenCopyText_",a="INPUT"===e.tagName||"TEXTAREA"===e.tagName;if(a)c=e,t=e.selectionStart,n=e.selectionEnd;else{if(c=document.getElementById(o),!c){var c=document.createElement("textarea");c.style.position="absolute",c.style.left="-9999px",c.style.top="0",c.id=o,document.body.appendChild(c)}c.textContent=e.textContent}var l=document.activeElement;c.focus(),c.setSelectionRange(0,c.value.length);var d;try{d=document.execCommand("copy")}catch(i){d=!1}return l&&"function"==typeof l.focus&&l.focus(),a?e.setSelectionRange(t,n):c.textContent="",d}                
        var activeViewType = '{!viewTypeActive}';
        
        $cq(document).ready(function() {
            loadFoldersData();
            $cq("#foldersCell").resizable({ 
                handles: 'e', minWidth: 160,  
                stop: function(event, ui) {
                    if (activeViewType == "card" || activeViewType == "grid")
                        masonryIt();
                }});
            
            $cq(window).click(function() {
                $cq(".actionMenu").slideUp(100, "easeOutQuart");
                $cq("a.btn.menu-open").removeClass("menu-open");
            });
            
            if ('{!viewTypeActive}' == 'card' || '{!viewTypeActive}' == 'grid' ) {
                masonryIt();
            }
             
            $cq( window ).resize(function() {
                var g = $cq('#card-grid');
                g.removeClass().addClass("grid-item-" + Math.round(g.width() / 200));
            });
            
            if (Clipboard.isSupported()){
                var clipboard = new Clipboard('.copy-btn');
                
                clipboard.on('success', function(e) {
                    $cq('#copyTooltip').tooltip('open');
                });
            }
        });
        
        
        function masonryIt(){  
            var $grid = $cq('#card-grid');
            $grid.imagesLoaded().progress( function() {
                $grid.masonry({ 
                    itemSelector: '.card-item', 
                    isAnimated: true,
                    animationOptions: {
                        duration: 750,
                        easing: 'linear',
                        queue: false
                    }});
            });
        }
        
        function showStatus(type, msg, duration){
            if (!duration) duration = 5;
            faIcons = {
                success: 'fa-check-circle',
                fail: 'fa-minus-circle',
                info: 'fa-info-circle'
            };
            msgHtml = '<div class="alert-box ' + type + '"><p><i class="fa fa-2x ' + faIcons[type] + '"/>&nbsp;&nbsp;&nbsp;' + msg + '</p></div>';
            $cq(msgHtml).appendTo('body').fadeIn().delay(duration * 1000).fadeOut().queue(function() { $cq(this).remove(); });
        }
        
        
        function slideToggleMenu(e, elm){
            e.stopPropagation();            
            var tmpMenu = $cq(elm).next(".actionMenu");
            $cq(".actionMenu").not(tmpMenu).slideUp(100);
            tmpMenu.slideToggle(150, "easeOutQuart");
        }
        
        function openActionMenu(e, elm){
            slideToggleMenu(e, elm);
        }
        
        function openCardActionMenu(e, elm){
            slideToggleMenu(e, elm);
            
            if ($cq(elm).hasClass("menu-open")){
                $cq(elm).removeClass("menu-open")
            } else {
                $cq("a.btn.menu-open").not(elm).removeClass("menu-open");
                $cq(elm).addClass("menu-open");
            }
        }
        
        function openCardSelectionMenu(e, elm){
            slideToggleMenu(e, elm);
        }
        
        function setSelectionRange(input, selectionStart, selectionEnd) {
            var range = input.createTextRange();
            range.collapse(true);
            range.moveEnd('character', selectionEnd);
            range.moveStart('character', selectionStart);
            range.select();
        }
        
        function fileCheckboxClick(cbxElem){
            var container = $cq(cbxElem).closest('.card-item-content');
            
            if (cbxElem.checked)
                container.addClass('selected');
            else
                container.removeClass('selected');
            
            updateFileSelections();
        }       
               
        function checkSelectAllBtn(){          
            var btn = $cq("#select-all-btn")[0];
            $cq(btn).find("i").removeClass().addClass("fa fa-lg fa" + (isAllSelected() ? "-check":"") + "-square-o");
        }
        
        function isAllSelected(){
            var elms = $cq(".file-checkbox");
            for (var i=0; i<elms.length; i++)
                if (!elms[i].checked)
                    return false;
            return true;
        }
        
        function selectAllBtnAction(){
            if (isAllSelected()){
                deselectAllItems();
            }
            else {
                selectAllItems();
            }
            updateFileSelections();
        }
        
        function anyFileSelected(cb) {
            var fileCheckElems = $cq('.file-checkbox');
            for (var i = 0; i < fileCheckElems.length; i++)
                if (fileCheckElems[i].checked)
                    return true;
            return false;
        }
        
        function fileCheckChangeEvent(id) {
            var fileCheckElems = $cq('.file-checkbox');
            
            $cq('.FileListTable td').removeClass('selected');
            
            for (var i = 0; i < fileCheckElems.length; i++) {
                if (fileCheckElems[i].checked) {
                    $cq(fileCheckElems[i]).closest('tr').find('td').addClass('selected');
                }
            }
            updateFileSelections();
        }
        
        function selectAllItems(){
            if (activeViewType == "card" || activeViewType == "grid")
                selectAllForCard();
            else
                selectAllForList();
        }
        function deselectAllItems(){
            if (activeViewType == "card" || activeViewType == "grid")
                deselectAllForCard();
            else
                deselectAllForList();
        }
        
        function selectAllForList() {
            $cq(".file-checkbox").prop('checked', true).closest('tr').children('td').addClass('selected');
            updateFileSelections();
        }
        
        function deselectAllForList() {
            $cq(".file-checkbox").prop('checked', false).closest('tr').children('td').removeClass('selected');
            updateFileSelections();
        }
        
        function selectAllForCard() {
            $cq(".file-checkbox").prop('checked', true);
            $cq('.card-item-content').addClass('selected');
            updateFileSelections();
        }
        
        function deselectAllForCard(){
            $cq(".file-checkbox").prop('checked', false);
            $cq('.card-item-content').removeClass('selected');
            updateFileSelections();
        }

        
        function updateFileSelections(){
            toolBarButtonsArrangeClass();
            checkSelectAllBtn();
            updateFileSelecitonsAF();
        }
        
        function canalizeDownload(){
            var fileCheckElems = $cq('.file-checkbox:checked');
            if (fileCheckElems.length > 1){ //zip & download
                getSelectedItemsJson(); 
                showDownloadStatus();
            }
            else if (fileCheckElems.length == 1){
                var dId = $cq(fileCheckElems[0]).attr("data-id");
                var dCT = $cq(fileCheckElems[0]).attr("data-content-type");
                
                if ( dCT == "Folder") { //zip & download
                    getSelectedItemsJson(); 
                    showDownloadStatus();
                }
                else { // one download
                    downloadAF(dId, '');
                }
            }
        }
        
        function openActionMenu(e, elm){
            e.stopPropagation();            
            var tmpMenu = $cq(elm).next(".actionMenu");
            $cq(".actionMenu").not(tmpMenu).slideUp(50);
            tmpMenu.slideToggle(50);
        }
        
        function toolBarButtonsArrangeClass() {
            if (anyFileSelected()) {
                $cq('.btncandisable').removeClass('btnDisabled').addClass('btn');
            } else {
                $cq('.btncandisable').removeClass('btn').addClass('btnDisabled');
            }
        }
        
        function loadJsTreeComponent(folderData){
            if (folderData != undefined && folderData != ""){
                var folders = checkFolderData(convertJsonForJsTree(folderData));
                $cq("#treeViewFolder")
                .jstree("destroy")
                .on('changed.jstree', function (e, data) {
                    loadFolderItems(data.selected[0]);
                })
                .jstree({ 'core' : { 'data' : folders } });
            }
        }
        function convertJsonForJsTree(f){
            var r = [];
            for (var i=0; i<f.length; i++)
                r.push({id: f[i][0], text: f[i][1], parent: f[i][2]});
            return r;
        }
        
        function checkFolderData(f){
            var removed = false;
            for (var i=f.length-1; i>=0; i--){
                var found = false;
                for (var j=f.length-1; j>=0; j--){
                    if (f[i].parent == '#' ){
                        found = true;
                        break;
                    }
                    else if ( i!=j && f[i].parent == f[j].id){
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    console.log("There is a folder record that have no parent folder: ", f[i]);
                    f.splice(i, 1);
                    removed = true;
                }
            }
            if (removed) 
                f = checkFolderData(f);   
            return f;
        }
        function loadFoldersData() { loadFoldersDataAF(); }
        
        function errDialog(title, errMsg, okBtnFunc){
            $cq("#errDialog").dialog({title: title, width: 400, modal: true, dialogClass: 'ui-widget-shadow',
                                    show: { effect: "fade", duration: 200 }, 
                                    hide: { effect: "fade", duration: 200 }, 
                                    buttons: [ { 
                                        text: "Ok", icons: { primary: "ui-icon-check" },
                                        click: function() { if(okBtnFunc){ okBtnFunc(); } $cq(this).dialog( "close" );}
                                    }],
                                    open: function( event, ui ) {
                                        $cq("#errDialogMsg").html(errMsg);
                                    }
                                   });
        }
        
        var showEditPanel = function() {
            $cq("#editPanel").dialog({width: 400,modal: true, dialogClass: 'ui-widget-shadow',
                                    show: { effect: "fade", duration: 200 }, 
                                    hide: { effect: "fade", duration: 200 }, 
                                    buttons: [ { 
                                        text: "Save", icons: { primary: "ui-icon-check" },
                                        click: function() { saveEditedFieldValues(); $cq( this ).dialog( "close" );}
                                    },{
                                        text: "Cancel", icons: { primary: "ui-icon-close" },
                                        click: function() { $cq(this).dialog( "close" );}
                                    }] });
            var descriptionTextBox = document.getElementById('{!$Component.editPanelPB.editPanelForm.editPanelBlockSection.fileDescription}');
            if (descriptionTextBox) {
                if (descriptionTextBox.value.length > 0) {
                    if (!(descriptionTextBox.createTextRange)) {
                        descriptionTextBox.focus();
                        descriptionTextBox.setSelectionRange(0, 9999);
                    } else {
                        setSelectionRange(descriptionTextBox, 0, 9999);
                    }
                } else {
                    descriptionTextBox.focus();
                }
            }
        }
        
        var hidePreviewPanel = function() {
            if ($cq("#previewPanel").is(':visible'))
                $cq("#previewPanel").dialog("destroy");
        }   
        var showPreviewPanel = function() {
            $cq("#previewPanel").dialog({
                minWidth: 1080, minHeight: 586, modal: true, 
                show: { effect: "fade", duration: 200 }, hide: { effect: "fade", duration: 200 }, 
                dialogClass: 'ui-widget-shadow preview-panel',
                open: function(event, ui){
                    var img = $cq("#preview-img")[0];
                    var pic_w, pic_h, container_w, container_h;
                    container_w = $cq(".previewPanelImgCell").width();
                    container_h = $cq(".previewPanelImgCell").height();
                    $cq(".previewPanelImgCell").imagesLoaded(function(){
                        $cq(img).removeClass();
                        pic_w = img.width;
                        pic_h = img.height;
                        var portrait = (pic_w/pic_h) < (container_w/container_h);
                        $cq(img).removeClass().addClass((portrait?"portrait":"landscape"));
                    });
                },
                close: function(event, ui) {
                    $cq(this).dialog('destroy').remove();
                }
            });
        }
        
        var refreshPreview = function() {
            if ($cq('#previewPanel').is(':visible')){
                $cq("#previewPanel").dialog("destroy");
                refreshPreviewAF();
                }
        }
        
        var showRenamePanel = function() {
            $cq("#renamePanel").dialog({width: 400, modal: true, show: { effect: "fade", duration: 200 }, hide: { effect: "fade", duration: 200 }, dialogClass: 'ui-widget-shadow',
                                      buttons: [ { text: "Save", icons: { primary: "ui-icon-check" },
                                                  click: function() { 
                                                      // CHANGE LOGIC HERE, IF UPDATE NOR ALLOWED DISABLE BUTTONS
                                                      if (getUpdateAllowed()){ renameFile(); }
                                                  }
                                                 },{
                                                     text: "Cancel", icons: { primary: "ui-icon-close" },
                                                     click: function() { $cq(this).dialog( "close" );}
                                                 }] });
            var nameTextBox = document.getElementById('{!$Component.renamePanelPB.renameForm.renamePanelPBS.newFileName}');
            if (nameTextBox) {
                if (!(nameTextBox.createTextRange)) {
                    nameTextBox.focus();
                    nameTextBox.setSelectionRange(0, 9999);
                } else {
                    setSelectionRange(nameTextBox, 0, 9999);
                }
            }
        }
        
        var hideSharePanel = function() {
            $cq("#sharePanel").dialog('close');
            var frame = document.getElementById("shareIframe");
            var frameDoc;
            if (frame) {
                if (frame.contentWindow) {
                    frame.contentWindow.document.innerHTML = '';
                } else if (frame.contentDocument && frame.contentDocument.document) {
                    frame.contentDocument.document.innerHTML = '';
                }
            }
        }
        var showSharePanel = function() {
            $cq("#sharePanel").dialog({width: 750, modal: true, show: {effect: "fade", duration: 200 }, hide: {effect: "fade", duration: 200 }, dialogClass: 'ui-widget-shadow' }); 
        }
        
        var showCopyUrlPanel = function() {
            $cq("#copyUrlPanel").dialog({
                width: 490, modal: true, dialogClass: 'ui-widget-shadow',
                show: {effect: "fade", duration: 200 }, 
                hide: {effect: "fade", duration: 200 },
                open: function(event, ui){
                    if (!Clipboard.isSupported()) {
                        $cq(".copy-btn-label").html("Please copy the url below.");
                        $cq(".copy-btn").hide();
                    }
                    
                    $cq('#copyTooltip').tooltip({
                        position: { of: '.copy-btn', my: 'center top', at: 'center bottom+5' },
                        show: { duration: "fast" },
                        classes: {
                            "ui-tooltip": "copy-tooltip"
                        },
                        open: function(e){
                            setTimeout(function () {
                                $cq(e.target).tooltip('close');
                            }, 2000);
                        }
                    });
                },
                close: function(event, ui){
                    $cq('#copyTooltip').tooltip('destroy');
                }
            }); 
        }
        var hideCopyUrlPanel = function() { $cq("#copyUrlPanel").dialog('close'); }
        
        var showConfirmDeletePanel = function() {
            $cq("#confirmDeletePanel").dialog({
                width: 400, modal: true, dialogClass: 'ui-widget-shadow',
                show: {effect: "fade", duration: 200 }, hide: {effect: "fade", duration: 200 }
            }); 
        }
        var hideConfirmDeletePanel = function() { $cq("#confirmDeletePanel").dialog('close');}
        
        var showNewFolderPanel = function() {
            $cq("#newFolderPanel").dialog({
                width: 400, modal: true, dialogClass: 'ui-widget-shadow',
                show: {effect: "fade", duration: 200 }, hide: {effect: "fade", duration: 200 }, 
                buttons:   [{ text: "Create", id: "createFolderButton", 
                             click: function() { 
                                 if (isFileCreatable()){
                                     $cq("#createFolderButton").button({ label: 'Checking...', disabled: true });
                                     createFolder(); 
                                 } else {
                                     createFolderError("<strong>Error:</strong> File is not creatable here!")
                                 }
                             } },
                            { text: "Cancel",       click: function() { $cq(this).dialog("close"); } }],
                open: function( event, ui ) {
                }
            }); 
            var folderNameTextBox = document.getElementById('{!$Component.newFolderPanelPB.newFolderForm.newFolderPanelPBS.folderName}');
            folderNameTextBox.focus();
        }
        var hideNewFolderPanel = function() { $cq("#newFolderPanel").dialog('close'); }
        
        var showUploadPanel = function() {
            $cq("#uploadPanel").dialog({
                width: 1050, modal: true, dialogClass: 'ui-widget-shadow',
                show: {effect: "fade", duration: 200 }, hide: {effect: "fade", duration: 200 },
                open: function(event, ui) {
                    $cq(".ui-dialog-titlebar-close", ui.dialog | ui).hide();
                }
            }); 
        }
        var hideUploadPanel = function() {
            $cq("#uploadPanel").dialog('close');
            var frame = document.getElementById("uploadIframe");
            var frameDoc;
            if (frame) {
                if (frame.contentWindow) {
                    frame.contentWindow.document.innerHTML = '';
                } else if (frame.contentDocument && frame.contentDocument.document) {
                    frame.contentDocument.document.innerHTML = '';
                }
            }
        }
        
        var showEmailPanel = function() {
            $cq("#emailPanel").dialog({
                width: 750, modal: true, dialogClass: 'ui-widget-shadow',
                show: {effect: "fade", duration: 200 }, hide: {effect: "fade", duration: 200 }
            }); 
        }
        var hideEmailPanel = function() {
            $cq("#emailPanel").dialog('close');            
            var frame = document.getElementById("emailIframe");
            if (frame) {
                if (frame.contentWindow) {
                    frame.contentWindow.document.innerHTML = '';
                } else if (frame.contentDocument && frame.contentDocument.document) {
                    frame.contentDocument.document.innerHTML = '';
                }
            }
        }
        
        var hideCutCopyPanel = function() {
            $cq("#cutCopyPanel").dialog('close');
        }
        var showCutCopyPanel = function() {
            $cq("#cutCopyPanel").dialog({
                width: 550, modal: true, dialogClass: 'ui-widget-shadow',
                show: {effect: "fade", duration: 200 }, hide: {effect: "fade", duration: 200 }
            }); 
        }
        
        var hideAttachPanel = function() {
            $cq("#attachPanel").dialog('close');
        }
        var showAttachPanel = function() {            
            $cq("#attachPanel").dialog({
                width: 550, modal: true, dialogClass: 'ui-widget-shadow',
                show: {effect: "fade", duration: 200 }, hide: {effect: "fade", duration: 200 }
            }); 
        }
        
        </script>
        
        <div id="downloadArea" style="display:none"></div>
        <apex:outputPanel layout="block" id="openArea" style="display: none">
            <script>
            var openFilePopupWarning = {
                init: function() {
                    if (this.popups_are_disabled() == true) {
                        this.alert_to_disable_popup_blocker();
                    }
                },
                alert_to_disable_popup_blocker: function() {
                    errDialog("Error!", "You have popup blocker enabled. Please disable popup blocker and try again!");
                },
                popups_are_disabled: function() {
                    var popup = window.open("{!JSENCODE(openUrlForFile)}", "openFileWindow", "width=640,height=640");
                    
                    if (!popup || popup.closed || typeof popup == "undefined" || typeof popup.closed == "undefined") {
                        return true;
                    }
                    popup.focus();
                    if (navigator && (navigator.userAgent.toLowerCase()).indexOf("chrome") > -1) {
                        var on_load_test = function() {
                            popupWarning.test_chrome_popups(popup);
                        };
                        var timer = setTimeout(on_load_test, 1000);
                        return;
                    }
                },
                test_chrome_popups: function(popup) {
                    if (popup && popup.screenX != 0) {
                        return true;
                    }
                    this.alert_to_disable_popup_blocker();
                }
            };
            </script>
        </apex:outputPanel>
        
        <div id="errDialog" style="display: none;" title="Error">
            <p class="dialog-p"><i class='fa fa-exclamation-circle fa-3x dialog-icon'></i><span id="errDialogMsg" class="dialog-text"></span></p>
        </div>
        
        <div id="confirmDialog" style="display: none;" title="Confirm">
            <p class="dialog-p"><i class='fa fa-question-circle fa-3x dialog-icon'></i><span id="confirmDialogMsg" class="dialog-text"></span></p>
        </div>
        
        <apex:outputPanel id="previewPanelPB" style="display: none;">
            <div id="previewPanel" style="display: none;" title="{!previewFile.fileName}">
                <table style="border-spacing: 0px; width: 100%;">
                    <tr>
                        <td class="previewPanelImgCell">
                            <apex:outputPanel rendered="{!previewFile != null && CONTAINS(previewFile.contentType, 'video')}">    
                                <iframe name="videoPlayer" class="video-player" src="{!URLFOR($Resource.VideoPlayer, 'VideoPlayer.html')}#{!previewFile.previewUrl}"
                                        allowfullscreen="true" webkitallowfullscreen="true" mozallowfullscreen="true"></iframe>
                            </apex:outputPanel>
                            
                            <apex:outputPanel layout="none" rendered="{! (CONTAINS(previewFile.contentType, 'video') == false) && !(CONTAINS(previewFile.contentType, 'Folder'))}">
                                <img src="{! IF(previewFile.previewUrl != '', previewFile.previewUrl, URLFOR($Resource.sources, 'file-icons/512px/no-thumbnail.jpg'))}" id="preview-img" class="with-shadow" />
                            </apex:outputPanel>
                            
                            <apex:outputPanel layout="none" rendered="{! (CONTAINS(previewFile.contentType, 'video') == false) && (CONTAINS(previewFile.contentType, 'Folder'))}">
                                <img src="{! URLFOR($Resource.sources, 'file-icons/512px/folder.png')}" class="portrait" />
                            </apex:outputPanel>
                        </td>
                        <td style="padding:15px 10px; vertical-align: top; width: 40%; height: 365px">
                            
                            <table class="preview-property-table" style="border-spacing: 0px; width: 100%; table-layout: fixed;">
                                <tr>
                                    <td class="preview-property-label break-word">File Name:</td>
                                    <td class="preview-property-value break-word" style="font-weight: bold;">{!previewFile.file['cg__File_Name__c']}</td>
                                </tr>
                                <tr>
                                    <td class="preview-property-label break-word">File Type:</td>
                                    <td class="preview-property-value break-word">{!previewFile.file['cg__Content_Type__c']}</td>
                                </tr>
                                <apex:repeat value="{!configuredFields}" var="field" id="customFieldRepeater">
                                    <tr>
                                        <td class="preview-property-label">{!field.fieldLabel}:</td>
                                        <td class="preview-property-value break-word">
                                            <apex:outputPanel rendered="{!previewFile.file[field.fieldId] != null}">
                                                <apex:outputField value="{!previewFile.file[field.fieldId]}"/>
                                            </apex:outputPanel>
                                        </td>    
                                    </tr>
                                </apex:repeat>
                            </table>
                        </td>
                    </tr>
                    <tr style="height: 30px;">
                        <td colspan="2">
                            <apex:form >
                                <div class="details-toolbar">
                                    
                                    <apex:outputPanel rendered="{!(previewFile.contentType != 'Folder')}"  layout="none">
                                        <a href="#" class="btn btn-link" title="Download" onclick="event.preventDefault(); downloadAF('{!previewFile.file.Id}'); return false;" ><i class="fa fa-download fa-lg" /> Download</a>
                                    </apex:outputPanel>
                                    
                                    <apex:outputPanel rendered="{!(previewFile.contentType != 'Folder') }" layout="none">
                                        <a href="#" class="btn btn-link" title="Open file in new window" onclick="event.preventDefault(); openAF('{!previewFile.file.Id}'); return false;" ><i class="fa fa-folder-open fa-lg" /> Open</a>
                                        <apex:actionFunction name="openAF" action="{!openFile}" reRender="openArea" onComplete="openFilePopupWarning.init()">
                                            <apex:param name="attachmentFileId" value="" />
                                        </apex:actionFunction>
                                    </apex:outputPanel>
                                    
                                    <apex:outputPanel rendered="{!previewFile.contentType == 'Folder'}" layout="none">
                                        <apex:outputPanel layout="none">
                                            <a href="#" class="btn btn-link" title="Download Folder as a zip file" onclick="event.preventDefault(); downloadFolderAF('{!previewFile.file.Id}');showDownloadStatus(); return false;" ><i class="fa fa-download fa-lg" /> Download</a>
                                            <apex:actionFunction name="downloadFolderAF" action="{!downloadFolderAsZip}" reRender="zipAndDownloadPB,FileList" onComplete="issuePostRequest();">
                                                <apex:param name="attachmentFileId" value="" />
                                            </apex:actionFunction>
                                        </apex:outputPanel>
                                        <a href="#" class="btn btn-link" title="Open Folder" onclick="event.preventDefault(); changeFolder('{!previewFile.file.Id}', '{!previewFile.fileName}'); return false;" ><i class="fa fa-folder-open fa-lg" /> Open</a>
                                        <apex:actionFunction name="changeFolderAFforDetails" action="{!changeFolder}" reRender="FileList" oncomplete="hidePreviewPanel()">
                                            <apex:param name="objectId" assignTo="{!objectIdAT}" value=""/> 
                                        </apex:actionFunction>
                                    </apex:outputPanel>                            
                                    
                                    <apex:outputPanel rendered="{!(previewFile.contentType != 'Folder')}" layout="none">
                                        <a href="#" class="btn btn-link" title="Copy URL to clipboard." onclick="event.preventDefault(); copyURLAF('{!previewFile.file.Id}'); return false;" ><i class="fa fa-external-link fa-lg" /> Copy URL</a>
                                        <apex:actionFunction name="copyURLAF" action="{!retrieveCopyUrl}" reRender="copyUrlPanelPB" onComplete="showCopyUrlPanel();" status="processStatus">
                                            <apex:param name="attachmentFileId" value="" />
                                        </apex:actionFunction>
                                    </apex:outputPanel>
                                    
                                    <a href="#" class="btn btn-link" title="Delete" onclick="event.preventDefault(); deleteAF('{!previewFile.file.Id}', '{!previewFile.contentType}'); return false;"><i class="fa fa-times fa-lg" style="color: red;"/> Delete</a>  
                                    
                                    <span class="menu-seperator">
                                        <i class="fa fa-ellipsis-v fa-1x"></i>
                                    </span>
                                    <apex:outputPanel layout="none">
                                        <a href="#" class="btn btn-link" title="Edit Fields" onclick="event.preventDefault(); editAF('{!previewFile.file.Id}'); return false;" ><i class="fa fa-pencil-square-o fa-lg" /> Edit</a>
                                        <apex:actionFunction name="editAF" action="{!editFieldValues}" reRender="editPanelPB" onComplete="showEditPanel();" status="processStatus">
                                            <apex:param name="attachmentFileId" value="" />
                                        </apex:actionFunction>
                                    </apex:outputPanel>
                                    <apex:outputPanel rendered="{!fileUpdateable }" layout="none">
                                        <a href="#" class="btn btn-link" title="Rename Items" onclick="event.preventDefault(); renameAF('{!previewFile.file.Id}'); return false;" ><i class="fa fa-pencil-square-o fa-lg" /> Rename</a>
                                        <apex:actionFunction name="renameAF" action="{!editFieldValues}" reRender="renamePanelPB" onComplete="showRenamePanel();" status="processStatus">
                                            <apex:param name="attachmentFileId" value="" />
                                        </apex:actionFunction>
                                    </apex:outputPanel>
                                    
                                  
                                    
                                    <apex:outputPanel rendered="{!(shareEnabled) && NOT(isShowVersions)}"  layout="none">
                                       <span class="menu-seperator">
                                        <i class="fa fa-ellipsis-v fa-1x"></i>
                                       </span>
                                        <a href="#" class="btn btn-link" title="Edit Share Settings" onclick="event.preventDefault(); shareAF('{!previewFile.file.Id}'); return false;" ><i class="fa fa-share-alt fa-lg" /> Share</a>
                                        
                                        <apex:actionFunction name="shareAF" action="{!loadShareWidget}" reRender="sharePanelPB" onComplete="showSharePanel();" status="processStatus">
                                            <apex:param name="attachmentFileId" value="" />
                                        </apex:actionFunction>
                                    </apex:outputPanel>
                                    
                                    <apex:outputPanel rendered="{!(previewFile.contentType != 'Folder')&&(isVersionedBucket)&&NOT(isShowVersions)&&NOT(isAppleDevice) && ( fileCreatable)}" layout="none">
                                        <i class="fa fa-ellipsis-v fa-1x"></i>
                                        <a href="#" class="btn btn-link" title="Upload New Version" onclick="event.preventDefault(); uploadVersionAF('{!previewFile.file.Id}'); hidePreviewPanel(); return false;" ><i class="fa fa-cloud-upload fa-lg" /> Upload New Version</a>
                                        <apex:actionFunction name="uploadVersionAF" reRender="uploadPanelPB" action="{!displayVersionUploadWidget}" onComplete="displayUpload();" status="processStatus" >
                                            <apex:param name="attachmentFileId" value="{!previewFile.file.Id}" />
                                        </apex:actionFunction>
                                    </apex:outputPanel>
                                    <apex:outputPanel rendered="{!(previewFile.contentType != 'Folder')&&(isVersionedBucket)&&NOT(isShowVersions)&&NOT(isAppleDevice) && (fileCreatable)}" layout="none">
                                        <a href="#" class="btn btn-link" title="Previous Versions" onclick="event.preventDefault(); previousVersionsAF('{!previewFile.file.Id}', '{!previewFile.fileName}'); hidePreviewPanel(); return false;" ><i class="fa fa-list-ol fa-lg" /> Previous Versions</a>
                                        <apex:actionFunction name="previousVersionsAF" reRender="FileList" action="{!loadVersions}" status="processStatus" >
                                            <apex:param name="versionFileId" value="{!previewFile.file.Id}" />
                                            <apex:param name="versionFileName" value="{!previewFile.fileName}" />
                                        </apex:actionFunction>
                                    </apex:outputPanel>
                                </div>
                            </apex:form>
                        </td>
                    </tr>
                </table>
            </div>
        </apex:outputPanel>
        
        <div id="editPanel" style="display: none;" title="Edit">
            <apex:pageBlock id="editPanelPB">
                <apex:form id="editPanelForm">
                    <apex:actionRegion >
                        <apex:pageMessages />
                        <apex:pageBlockSection id="editPanelBlockSection" columns="1" rendered="{!updateAllowed}">
                            
                            <apex:repeat value="{!configuredFields}" var="field" id="customFieldRepeater">
                                <apex:inputField id="editFieldId" rendered="{!field.fieldUpdateable}" value="{!editedFile[field.fieldId]}" />
                            </apex:repeat>
                            <!-- <apex:inputTextArea id="fileDescription" value="{!editedFile['cg__Description__c']}" cols="40" />-->
                            <apex:actionFunction name="saveEditedFieldValues" action="{!saveEditedFieldValues}" rerender="FileList" rendered="{!updateAllowed}" oncomplete="refreshPreview()" status="processStatus" />
                        </apex:pageBlockSection>
                    </apex:actionRegion>
                </apex:form>
            </apex:pageBlock>
        </div>
        
        <div id="renamePanel" style="display: none" title="Rename">
            <div id="renameError" style="display: none;" class="ui-state-error ui-corner-all">
                <p class="dialog-p remove-margin"><i class='fa fa-exclamation-circle fa-3x dialog-icon'></i><span id="renameErrorText" class="dialog-text"></span></p>
            </div>
            <apex:pageBlock id="renamePanelPB">
                <apex:form id="renameForm" onsubmit="javascript:renameFile();return false;">
                    <apex:actionRegion >
                        <apex:pageMessages />
                        <apex:pageBlockSection id="renamePanelPBS" columns="1" rendered="{!updateAllowed}">
                            <apex:inputText id="newFileName" value="{!editedFile['cg__File_Name__c']}" size="40" />
                            <apex:actionFunction name="saveEditedFieldValues" action="{!saveEditedFieldValues}" rerender="FileList" rendered="{!updateAllowed}" status="processStatus" />
                        </apex:pageBlockSection>
                        
                        <script>
                        function getUpdateAllowed(){ return {!updateAllowed}; };
                        
                        function renameError(errMsg){
                            $cq("#renameErrorText").html(errMsg);
                            $cq("#renameError").show();
                        };
                        
                        function renameFile() {
                            $cq("#renameError").hide();
                            var currentFolderId = '{!JSENCODE(objectIdAT)}';
                            var oldFileId = '{!JSENCODE(editedFile['Id'])}';
                            var oldFileNameValue = '{!JSENCODE(editedFile['cg__File_Name__c'])}';
                            var oldFileContentType = '{!JSENCODE(editedFile['cg__Content_Type__c'])}';
                            var newFileNameValue = document.getElementById('{!$Component.renamePanelPB.renameForm.renamePanelPBS.newFileName}').value;
                            
                            if (newFileNameValue == '') {
                                renameError("<strong>Error:</strong> Name cannot be blank!");
                                return;
                            }
                            else if (newFileNameValue == oldFileNameValue) {
                                renameError("<strong>Error:</strong> Name cannot be same with the old name!");
                                return;
                            }
                                else if (!isValid(newFileNameValue)) {
                                    renameError("<strong>Error:</strong> Name cannot start with a space or a dot and cannot contain any of the following characters: \\ / : * ? \" < > | ~");
                                    return;
                                }
                            
                            Visualforce.remoting.Manager.invokeAction(
                                'cg.SDriveControllerExtension.checkIfFileNameExists',
                                newFileNameValue, currentFolderId,
                                function(fileExistsResult, event) {
                                    if (event.status) {
                                        if (fileExistsResult != null) {
                                            renameError("<strong>Error:</strong> Cannot rename item. An item with the name you specified already exists. Specify a different name!");
                                            return;
                                        } else {
                                            // copy s3 object
                                            Visualforce.remoting.Manager.invokeAction(
                                                'cg.SDriveController.renameS3File',
                                                oldFileId, newFileNameValue,
                                                function(renameS3FileResult, event) {
                                                    if (event.status) {
                                                        reloadFolderItems();
                                                        $cq('#renamePanel').dialog('close');
                                                        refreshPreview();
                                                        return;
                                                    } else {
                                                        renameError("<strong>Error:</strong> Error occured while renaming!");
                                                        reloadFolderItems();
                                                        return;
                                                    }
                                                }, {
                                                    escape: true
                                                }
                                            );
                                        }
                                    }
                                }, {
                                    escape: true
                                }
                            );
                        }
                        </script>
                    </apex:actionRegion>
                </apex:form>
            </apex:pageBlock>
        </div>
        
        <div id="confirmDeletePanel" style="display: none" title="Delete">
            <apex:pageBlock id="confirmDeletePanelPB">
                <apex:form >
                    <apex:actionRegion >
                        <apex:pageMessages />
                        <apex:pageBlockSection columns="1" rendered="{!deleteAllowed}">
                            Are you sure?
                            <apex:outPutPanel rendered="{!isVersionedBucket && NOT(isShowVersions) && attachmentContentType!='Folder'}">
                                Previous versions of the file(s) will also be deleted.
                            </apex:outPutPanel>
                        </apex:pageBlockSection>
                        <div style="text-align: right;">
                            <apex:actionStatus id="deleteStatus">
                                <apex:facet name="stop">
                                    <apex:commandButton value="Delete" oncomplete="hideConfirmDeletePanel(); hidePreviewPanel(); loadFoldersData();" action="{!deleteFile}" rerender="FileList" rendered="{!deleteAllowed}" status="deleteStatus" />
                                </apex:facet>
                                <apex:facet name="start">
                                    <apex:commandButton value="Processing..." disabled="true" status="deleteStatus" />
                                </apex:facet>
                            </apex:actionStatus>
                            <input type="button" class="btn" onclick="hideConfirmDeletePanel();" value="Cancel" />
                        </div>
                    </apex:actionRegion>
                </apex:form>
            </apex:pageBlock>
        </div>
        
        <div id="copyUrlPanel" style="display: none" title="Copy URL">
            <apex:pageBlock id="copyUrlPanelPB">
                <apex:form >
                    <apex:actionRegion >
                        <apex:pageBlockSection columns="1">                        
                        <apex:outputLabel value="Click <strong>Copy</strong> button to copy url address." styleClass="copy-btn-label" for="attachmentFileUrl" escape="false" />
                        <input type="text" id="attachmentFileUrl" value="{!copyUrl}" style="padding: 3px; float: left; width: 360px;" />
                        
                        <button class="btn copy-btn" type="button" style="float: left; padding: 4px; margin: 0px;" data-clipboard-target="#attachmentFileUrl">
                            <i class="fa fa-files-o" aria-hidden="true"></i> Copy
                        </button>
                        <a id="copyTooltip" title="Copied!"></a>
                    </apex:pageBlockSection>
                    </apex:actionRegion>
                </apex:form>
            </apex:pageBlock>
        </div>
        
        <div id="newFolderPanel" style="display: none" title="New Folder">
            <div id="newFolderError" style="display: none;" class="ui-state-error ui-corner-all">
                <p class="dialog-p remove-margin"><i class='fa fa-exclamation-circle fa-3x dialog-icon'></i><span id="newFolderErrorText" class="dialog-text"></span></p>
            </div>
            <apex:pageBlock id="newFolderPanelPB">
                <apex:form id="newFolderForm" onsubmit="javascript:createFolder();return false;">
                    <apex:actionRegion >
                        <apex:pageMessages />
                        <apex:pageBlockSection columns="1" id="newFolderPanelPBS">
                            <apex:inputField id="folderName" onkeypress="return noEnter(event);" label="Folder Name" value="{!newFolder.cg__File_Name__c}" />
                            <apex:inputField id="folderDescription" value="{!newFolder.cg__Description__c}" />
                        </apex:pageBlockSection>
                        <apex:inputCheckbox id="inheritSharing" selected="true" title="Inherit Sharing from Parent Folder" rendered="{!shareEnabled && objectIdAT != ''}" />
                        <apex:outputText value="Inherit Sharing from Parent Folder" rendered="{!shareEnabled && objectIdAT != ''}" />
                        
                        <div style="text-align: right;">
                            <script>
                            function isFileCreatable(){ return {!fileCreatable}; }
                            
                            function noEnter(ev) {
                                if (window.event && window.event.keyCode == 13 || ev.which == 13) {
                                    return false;
                                } else {
                                    return true;
                                }
                            }
                            
                            function createFolderError(errMsg){
                                $cq("#newFolderErrorText").html("<strong>Error:</strong> " + errMsg);
                                $cq("#newFolderError").show();
                                $cq("#createFolderButton").button({ label: 'Create', disabled: false });
                            }
                            
                            function createFolder() {
                                $cq("#newFolderError").hide();
                                var currentFolderId = '{!JSENCODE(objectIdAT)}';
                                var shareEnabled = '{!shareEnabled}';
                                var newFolderNameValue = document.getElementById('{!$Component.newFolderPanelPB.newFolderForm.newFolderPanelPBS.folderName}').value;
                                var folderDescription = document.getElementById('{!$Component.newFolderPanelPB.newFolderForm.newFolderPanelPBS.folderDescription}').value;
                                
                                var inheritSharingValue = false;
                                if (shareEnabled == 'true' && currentFolderId != '') {
                                    inheritSharingValue = document.getElementById('{!$Component.newFolderPanelPB.newFolderForm.inheritSharing}').checked;
                                }
                                
                                if (newFolderNameValue == '') {
                                    createFolderError('Name cannot be blank!');
                                }
                                else if (!isValid(newFolderNameValue)) {
                                    createFolderError('Name cannot start with a space or a dot and cannot contain any of the following characters: \\ / : * ? \" < > | ~');
                                }
                                    else {
                                        Visualforce.remoting.Manager.invokeAction(
                                            'cg.SDriveControllerExtension.checkIfFileNameExists',
                                            newFolderNameValue, currentFolderId,
                                            function(fileExistsResult, event) {
                                                if (event.status) {
                                                    if (fileExistsResult != null) {
                                                        createFolderError('An item with the name you specified already exists. Specify a different name!');
                                                    } else {
                                                        // create new folder
                                                        Visualforce.remoting.Manager.invokeAction(
                                                            'cg.SDriveController.createNewFolder',
                                                            newFolderNameValue, folderDescription, inheritSharingValue, currentFolderId,
                                                            function(createNewFolderResult, event) {
                                                                if (event.status) {
                                                                    reloadFolderItems();
                                                                    hideNewFolderPanel();
                                                                    loadFoldersData();
                                                                } else {
                                                                    createFolderError("Folder creation failed: " + event.message);
                                                                }
                                                            }, {
                                                                escape: true
                                                            }
                                                        );
                                                    }
                                                }
                                            }, {
                                                escape: true
                                            }
                                        );
                                    }
                            }
                            </script>
                        </div>
                    </apex:actionRegion>
                </apex:form>
            </apex:pageBlock>
        </div>
        
        <script>
        var popup = null;
        var uploadPopupWindow = null;
        </script>
        <apex:outputPanel id="initUploadManager">
            <div id="uploadPanel" style="display: none" title="Upload">
                <apex:outputPanel id="uploadPanelPB" >
                    <script>
                    var uploadUrl = '{!JSENCODE(uploadUrl)}';
                    var uploadAsPopup = {!uploadAsPopup};
                    var checkTimer;
                    
                    function displayUpload() {
                        if (uploadAsPopup) {
                            uploadPopupWarning.init();
                        } else {
                            showUploadPanel();
                        }
                    }
                    
                    function uploadCompleted() {
                        reloadFolderItems();
                        hideUploadPanel();
                    }
                    </script>
                    
                    <apex:outputPanel id="uploadPopupScripts" rendered="{!uploadAsPopup}">
                        <script>
                        var uploadPopupWarning = {
                            init: function() {
                                if (!uploadPopupWindow || uploadPopupWindow.closed || typeof uploadPopupWindow == "undefined" || typeof uploadPopupWindow.closed == "undefined") {
                                    if (this.popups_are_disabled() == true) {
                                        this.alert_to_disable_popup_blocker();
                                    }
                                } else {
                                    uploadPopupWindow.focus();
                                }
                            },
                            alert_to_disable_popup_blocker: function() {
                                errDialog("Error!", "You have popup blocker enabled. Please disable popup blocker and try again!");
                            },
                            popups_are_disabled: function() {
                                uploadPopupWindow = window.open(uploadUrl, 'Upload', 'resizable=yes,width=1050,height=550, top=10, left=10');
                                checkTimer = setInterval(checkWindowExists, 500);
                                
                                if (!uploadPopupWindow || uploadPopupWindow.closed || typeof uploadPopupWindow == "undefined" || typeof uploadPopupWindow.closed == "undefined") {
                                    return true;
                                }
                                uploadPopupWindow.focus();
                                
                                if (navigator && (navigator.userAgent.toLowerCase()).indexOf("chrome") > -1) {
                                    var on_load_test = function() {
                                        uploadPopupWarning.test_chrome_popups(uploadPopupWindow);
                                    };
                                    var timer = setTimeout(on_load_test, 1000);
                                    return;
                                }
                            },
                            test_chrome_popups: function(uploadPopupWindow) {
                                if (uploadPopupWindow && uploadPopupWindow.screenX != 0) {
                                    return true;
                                }
                                this.alert_to_disable_popup_blocker();
                            }
                        };
                        
                        function checkWindowExists() {
                            if (uploadPopupWindow == null || uploadPopupWindow == undefined || uploadPopupWindow.closed) {
                                clearInterval(checkTimer);
                                reloadFolderItems();
                            }
                        }
                        </script>
                    </apex:outputPanel>
                    <apex:iframe id="uploadIframe" rendered="{!uploadUrl != null && NOT(uploadAsPopup)}" src="{!uploadUrl}" width="100%" height="550px" />
                </apex:outputPanel>
            </div>
        </apex:outputPanel>
        
        <div id="emailPanel" style="display: none" title="Email">
            <apex:outputPanel layout="block" id="emailPanelPB">
                <apex:pageMessages />
                <apex:form id="cancelEmailForm">
                    <apex:commandButton rendered="{!pageHasErrors}" onclick="hideEmailPanel();return false;" title="Close" value="Close" style="float: right;" />
                </apex:form>
                <apex:iframe id="emailIframe" rendered="{!emailWidgetUrl != null && NOT(pageHasErrors)}" src="{!emailWidgetUrl}" width="100%" height="600px" scrolling="true" />
            </apex:outputPanel>
        </div>
        
        <div id="sharePanel" style="display: none;" title="Share">
            <apex:outputPanel layout="block" id="sharePanelPB">
                <apex:pageMessages />
                <apex:form id="cancelShareForm">
                    <apex:commandButton rendered="{!pageHasErrors}" onclick="hideSharePanel();return false;" title="Close" value="Close" style="float: right;" />
                </apex:form>
                
                <apex:iframe id="shareIframe" rendered="{!shareWidgetUrl != null && NOT(pageHasErrors) && fileUpdateable}" src="{!shareWidgetUrl}" width="100%" height="400px" />
            </apex:outputPanel>
        </div>
        
        
        <div id="cutCopyPanel" style="display: none" title="Paste">
            <apex:outputPanel id="cutCopyPanelPB">
                <apex:pageMessages />
                <apex:form id="cancelCutCopyForm">
                    <apex:commandButton rendered="{!pageHasErrors}" onclick="hideCutCopyPanel();return false;" title="Close" value="Close" style="float: right;" />
                    
                    <script>
                    if ({!pageHasErrors}) showCutCopyPanel();
                    var cutCopyItems = jQuery.parseJSON('{!JSENCODE(cutCopyItemsAsJson)}');
                    var cutCopyItemNames = jQuery.parseJSON('{!JSENCODE(cutCopyItemNamesAsJson)}');
                    var cutRequested = {!cutRequested};
                    var currentFolderId = '{!JSENCODE(objectIdAT)}';
                    var sourceFolderId = '{!JSENCODE(sourceFolderId)}';
                    var currentItemNumber = 1;
                    var cutCopyProgressBar = $cq('#cutCopyProgressBar');
                    var currentWIPFile = null;
                    var cancelRequested = false;
                    var inheritSharingRequested = false;
                    var customerPortalUser = {!isCustomerPortalUser};
                    var configuredFieldsString='{!configuredFieldsStringPublic}';
                    var subFolderIds= '{!subFolders2}';
                    var errorMessage=false;
                    
                    
                    function displayCopyPastePanel() {
                        // SA - Get folder ids and verify if paste is not being done within the folder hierarchy under itself.
                        var result = subFolderIds.substring(0, subFolderIds.length-1);
                        var subFolderIdsResult = result.split(',');
                        var i;
                        for (i = 0; i < subFolderIdsResult.length; i++) { 

                           if (subFolderIdsResult[i]==currentFolderId) {
                                errorMessage=true;
                                break;
                            }                                                        
                        }
                        
                        if (currentFolderId == sourceFolderId) {                                
                            errDialog("Error", "You cannot paste to the same folder, please select another folder and try again!");
                            return;
                        }
                        
                        if (errorMessage) {                                
                            errDialog("Error", "You cannot paste to the same folder, please select another folder and try again!");
                            return;
                        }
                        
                        cutCopyProgressBar.progressbar({
                            value: false,
                            max: cutCopyItems.length,
                            change: function() {
                                var pval = cutCopyProgressBar.progressbar('value');
                                $cq('#cutCopyProgressBarLabel').html('Pasting ' + cutCopyItemNames[pval] + ' [' + (pval + 1) + ' of ' + cutCopyItems.length + '] ...');
                                $cq('#cutCopyProgressBarPercentage').html('% ' + Math.round(pval * 100 / cutCopyItems.length));
                            }
                        });
                        
                        if (customerPortalUser) {
                            inheritSharingRequested = false;
                            processItem();
                        } else {
                            $cq("#confirmDialog").dialog({
                                width: 450, modal: true, dialogClass: 'ui-widget-shadow',
                                show: {effect: "fade", duration: 200 }, 
                                hide: {effect: "fade", duration: 200 }, 
                                buttons:   [
                                    { text: "Yes",      click: function() { inheritSharingRequested = true;  processItem(); $cq(this).dialog("close"); } },
                                    { text: "No",       click: function() { inheritSharingRequested = false; processItem(); $cq(this).dialog("close"); } }
                                ],
                                open: function( event, ui ) {
                                    $cq("#confirmDialogMsg").html("Do you want to bring the current sharings with the " + (cutRequested ? "cut" : "copied") + " items(s)?");
                                }
                            }); 
                        }
                    }
                    
                    function goToNextItem() {
                        if (cancelRequested) {
                            cancelPaste();
                            return;
                        }
                        showCutCopyPanel();
                        currentItemNumber++;
                        processItem();
                    }
                    
                    function processItem() {
                        cutCopyProgressBar.progressbar({ value: currentItemNumber - 1 });
                        if (cutCopyItems.length >= currentItemNumber) {
                            showCutCopyPanel();
                            Visualforce.remoting.Manager.invokeAction(
                                'cg.SDriveControllerExtension.checkIfFileExists',
                                cutCopyItems[currentItemNumber - 1], currentFolderId,
                                function(fileExistsResult, event) {
                                    if (event.status) {
                                        if (fileExistsResult != null) {
                                            var handleYes = function() {
                                                Visualforce.remoting.Manager.invokeAction(
                                                    'cg.SDriveController.trydeletingExistingFile',
                                                    fileExistsResult,
                                                    function(tryDeletingExistingFileResult, event) {
                                                        if (event.status) {
                                                            Visualforce.remoting.Manager.invokeAction(
                                                                'cg.SDriveController.deleteExistingFile',
                                                                fileExistsResult,
                                                                function(deleteExistingFileResult, event) {
                                                                    if (event.status) {
                                                                        finishPasting();
                                                                    } else {
                                                                        hideCutCopyPanel();
                                                                        errDialog("Permission Error", "Delete operation for the existing file failed: " + event.message, function(){ goToNextItem(); });
                                                                    }
                                                                }, {
                                                                    escape: true
                                                                }
                                                            );
                                                        } else {
                                                            hideCutCopyPanel();
                                                            errDialog("Permission Error", "Delete operation for the existing file failed: " + event.message, function(){ goToNextItem(); });
                                                        }
                                                    }, {
                                                        escape: true
                                                    }
                                                );
                                            };
                                            
                                            hideCutCopyPanel();
                                            $cq("#confirmDialog").dialog({
                                                width: 450, modal: true, dialogClass: 'ui-widget-shadow',
                                                show: {effect: "fade", duration: 200 }, 
                                                hide: {effect: "fade", duration: 200 }, 
                                                buttons:   [
                                                    { text: "Yes",      click: function() { handleYes();    $cq(this).dialog("close"); } },
                                                    { text: "No",       click: function() { goToNextItem(); $cq(this).dialog("close"); } },
                                                    { text: "Cancel",   click: function() { cancelPaste();  $cq(this).dialog("close"); } }
                                                ],
                                                open: function( event, ui ) {
                                                    $cq("#confirmDialogMsg").html("There is already a file with the name <strong>" + cutCopyItemNames[currentItemNumber - 1] + "</strong>. Do you want to overwrite?");
                                                }
                                            }); 
                                        } else {
                                            finishPasting();
                                        }
                                    } else {
                                        //alert('An error occured: ' + event.message);
                                    }
                                }, {
                                    escape: true
                                }
                            );
                        } else {
                            if (cutRequested) {
                                clearPasteAndReloadFolderItems();
                            } else {
                                //reloadFolderItems();
                                clearPasteAndReloadFolderItems();
                            }
                            hideCutCopyPanel();
                        }
                    }
                    
                    function finishPasting() {
                        if (cancelRequested) {
                            cancelPaste();
                            return;
                        }
                        showCutCopyPanel();
                        
                        if (cutRequested) {
                            Visualforce.remoting.Manager.invokeAction(
                                'cg.SDriveController.finishCutting',
                                cutCopyItems[currentItemNumber - 1], currentFolderId, inheritSharingRequested,
                                function(finishPastingResult, event) {
                                    if (event.status) {
                                        goToNextItem();
                                    } else {
                                        hideCutCopyPanel();
                                        errDialog("Permission Error", "Cut operation failed for file: " + cutCopyItemNames[currentItemNumber - 1] + " Error Message: " + event.message, function(){ goToNextItem(); });
                                    }
                                }, {
                                    escape: true
                                }
                            );
                        } else {
                            // SA- Configured fields string passed to remote action to copy configured fields
                            Visualforce.remoting.Manager.invokeAction(
                                'cg.SDriveController.copySalesforceObject2',
                                cutCopyItems[currentItemNumber - 1], currentFolderId, inheritSharingRequested,configuredFieldsString,
                                function(copySalesforceObjectResult, event) {
                                    if (event.status || copySalesforceObjectResult != null) {
                                        if (cancelRequested) {
                                            cancelPaste();
                                            return;
                                        }
                                        Visualforce.remoting.Manager.invokeAction(
                                            'cg.SDriveController.copyS3File',
                                            cutCopyItems[currentItemNumber - 1], copySalesforceObjectResult,
                                            function(copyS3FileResult, event) {
                                                if (event.status) {
                                                    currentWIPFile = null;
                                                    goToNextItem();
                                                } else {
                                                    Visualforce.remoting.Manager.invokeAction(
                                                        'cg.SDriveController.deleteExistingFile',
                                                        copyS3FileResult,
                                                        function(deleteExistingFileResult, event) {
                                                            if (event.status) {
                                                                currentWIPFile = null;
                                                            }
                                                            goToNextItem();
                                                        }, {
                                                            escape: true
                                                        }
                                                    );
                                                }
                                            }, {
                                                escape: true
                                            }
                                        );
                                    } else {
                                        hideCutCopyPanel();
                                        errDialog("Permission Error", "Paste operation failed during data copy for file: " + cutCopyItemNames[currentItemNumber - 1] + " Error Message: " + event.message, function(){ goToNextItem(); });
                                    }
                                }, {
                                    escape: true
                                }
                            );
                        }
                    }
                    
                    function requestCancel() {
                        cancelRequested = true;
                        $cq('#cutCopyProgressBarLabel').html('Canceling ...');
                    }
                    
                    function cancelPaste() {
                        if (currentWIPFile != null) {
                            Visualforce.remoting.Manager.invokeAction(
                                'cg.SDriveController.deleteExistingFile',
                                copyS3FileResult,
                                function(deleteExistingFileResult, event) {
                                    if (!event.status) {
                                        //alert('Could not cleanup temp file!'); 
                                    }
                                    if (cutRequested) {
                                        clearPasteAndReloadFolderItems();
                                    } else {
                                        reloadFolderItems();
                                    }
                                    hideCutCopyPanel();
                                }, {
                                    escape: true
                                }
                            );
                        } else {
                            if (cutRequested) {
                                clearPasteAndReloadFolderItems();
                            } else {
                                reloadFolderItems();
                            }
                            hideCutCopyPanel();
                        }
                    }
                    
                    function pasteButtonCheck() {
                        /*
                        if ({!isCutCopySelected})
                            $cq('#toolbarPasteButton').removeClass('btnDisabled').addClass('btn');
                        else
                            $cq('#toolbarPasteButton').removeClass('btn').addClass('btnDisabled');
                            */
                    }
                    
                    </script>
                    <apex:outputPanel id="cutPasteProgressPanel" rendered="{!NOT(pageHasErrors)}" style="height:300px">
                        <center>
                            <div id="cutCopyProgressBarLabel" style="height:20px"></div>
                            <div id="cutCopyProgressBar"><div id="#cutCopyProgressBarPercentage" class="progress-label">Loading...</div></div>
                        </center>
                        <apex:commandButton onclick="requestCancel();return false;" title="Cancel" value="Cancel" style="float:right;" status="processStatus" />
                    </apex:outputPanel>
                </apex:form>
                <br />
            </apex:outputPanel>
        </div>
        
        <div id="attachPanel" style="display: none" title="Attach">
            <apex:outputPanel id="attachPanelPB">
                <apex:pageMessages />
                <apex:form id="cancelAttachForm">
                    <apex:commandButton rendered="{!pageHasErrors}" onclick="hideAttachPanel();return false;" title="Close" value="Close" style="float: right;" />
                    
                    <script>
                    if ({!pageHasErrors}) {
                        showAttachPanel();
                    }
                    var attachItems = jQuery.parseJSON('{!JSENCODE(attachItemsAsJson)}');
                    var attachItemNames = jQuery.parseJSON('{!JSENCODE(attachItemNamesAsJson)}');
                    var currentFolderId = '{!JSENCODE(objectIdAT)}';
                    var currentItemNumber = 1;
                    var attachProgressBar = $cq("#attachProgressBar");
                    var currentWIPFile = null;
                    var cancelRequested = false;
                    var inheritSharingRequested = false;
                    
                    function displayAttachPanel() {
                        if (attachItems != null && attachItems != '') {                            
                            attachProgressBar.progressbar({
                                value: false,
                                max: attachItems.length,
                                change: function() {
                                    var pval = attachProgressBar.progressbar('value');
                                    $cq('#attachProgressBarLabel').html('Attaching ' + attachItemNames[pval] + ' [' + (pval + 1) + ' of ' + attachItems.length + '] ...');
                                    $cq('#attachProgressBarPercentage').html('% ' + Math.round(pval * 100 / attachItems.length));
                                }
                            });
                            processItem();
                        }
                    }
                    
                    function goToNextItem() {
                        if (cancelRequested) {
                            cancelAttach();
                            return;
                        }
                        showAttachPanel();                        
                        currentItemNumber++;
                        processItem();
                    }
                    
                    function processItem() {
                        attachProgressBar.progressbar({ value: currentItemNumber - 1 });
                        if (attachItems.length >= currentItemNumber) {
                            finishAttaching();
                        } else {                            
                            hideAttachPanel();
                            $cq("#confirmDialog").dialog({
                                width: 450, modal: true, dialogClass: 'ui-widget-shadow',
                                show: {effect: "fade", duration: 200 }, 
                                hide: {effect: "fade", duration: 200 }, 
                                buttons:   [
                                    { text: "Yes",      click: function() { reloadFolderItems(); $cq(this).dialog("close"); } },
                                    { text: "No",       click: function() { attachCompleted(); $cq(this).dialog("close"); } }
                                ],
                                open: function( event, ui ) {
                                    $cq("#confirmDialogMsg").html("Attach completed. Do you want to attach more files?");
                                }
                            }); 
                        }
                    }
                    
                    function finishAttaching() {
                        if (cancelRequested) {
                            cancelAttach();
                            return;
                        }
                        var targetNamespacePrefix = '{!JSENCODE($CurrentPage.parameters.namespacePrefix)}';
                        var targetObjectFileName = '{!JSENCODE($CurrentPage.parameters.customObjectFileName)}';
                        var targetObjectId = '{!JSENCODE($CurrentPage.parameters.objectId)}';
                        var targetFolderId = '{!JSENCODE($CurrentPage.parameters.currentFolderId)}';
                        var relationshipName = '{!JSENCODE($CurrentPage.parameters.relationshipName)}';
                        var privateEnabled = '{!JSENCODE($CurrentPage.parameters.privateEnabled)}';
                        
                        showAttachPanel();
                        Visualforce.remoting.Manager.invokeAction(
                            'cg.SDriveController.copySalesforceObjectForAttach',
                            attachItems[currentItemNumber - 1], targetNamespacePrefix, targetObjectFileName,
                            targetObjectId, targetFolderId, relationshipName, privateEnabled,
                            function(copySalesforceObjectResult, event) {
                                if (event.status || copySalesforceObjectResult != null) {
                                    if (cancelRequested) {
                                        cancelAttach();
                                        return;
                                    }
                                    Visualforce.remoting.Manager.invokeAction(
                                        'cg.SDriveController.copyS3FileForAttach',
                                        attachItems[currentItemNumber - 1], copySalesforceObjectResult, targetNamespacePrefix,
                                        targetObjectFileName, targetObjectId,
                                        function(copyS3FileResult, event) {
                                            if (event.status) {
                                                currentWIPFile = null;
                                                goToNextItem();
                                            } else {
                                                Visualforce.remoting.Manager.invokeAction(
                                                    'cg.SDriveController.deleteExistingFileForAttach',
                                                    copyS3FileResult, targetObjectId, targetObjectFileName, targetNamespacePrefix,
                                                    function(deleteExistingFileResult, event) {
                                                        if (event.status) {
                                                            currentWIPFile = null;
                                                        } else {
                                                            //alert('Attach operation during Amazon copy failed for file: ' + attachItemNames[currentItemNumber - 1] + " and could not cleanup the temp file. Error Message: " + event.message);
                                                        }
                                                        goToNextItem();
                                                    }, {
                                                        escape: true
                                                    }
                                                );
                                            }
                                        }, {
                                            escape: true
                                        }
                                    );
                                } else {
                                    var handleOK = function() {
                                        goToNextItem();
                                    };
                                    hideAttachPanel();
                                    errDialog("Permission Error!", "Attach operation failed during data copy for file: " + attachItemNames[currentItemNumber - 1] + " Error Message: " + event.message, handleOK)
                                }
                            }, {
                                escape: true
                            }
                        );
                    }
                    
                    function requestCancel() {
                        cancelRequested = true;
                        $cq('#attachProgressBarLabel').html('Canceling ...');
                    }
                    
                    function cancelAttach() {
                        if (currentWIPFile != null) {
                            Visualforce.remoting.Manager.invokeAction(
                                'cg.SDriveController.deleteExistingFileForAttach',
                                copyS3FileResult, targetObjectId, targetObjectFileName, targetNamespacePrefix,
                                function(deleteExistingFileResult, event) {
                                    if (!event.status) {
                                        //alert('Could not cleanup temp file!'); 
                                    }
                                    reloadFolderItems();
                                    hideAttachPanel();
                                }, {
                                    escape: true
                                }
                            );
                        } else {
                            reloadFolderItems();
                            hideAttachPanel();
                        }
                    }
                    </script>
                    <apex:outputPanel id="attachProgressPanel" rendered="{!NOT(pageHasErrors)}" style="height:300px">
                        <center>
                            <div id="attachProgressBarLabel" style="height:20px"></div>
                            <div id="attachProgressBar"><div id="attachProgressBarPercentage" class="progress-label"></div></div>
                        </center>
                        <apex:commandButton onclick="requestCancel();return false;" title="Cancel" value="Cancel" style="float:right;" status="processStatus" />
                    </apex:outputPanel>
                </apex:form>
                <br />
            </apex:outputPanel>
        </div>
        
        <apex:outputPanel id="initDownloadManager">
            <script>
            var downloadManagerPopup = {
                init: function() {
                    if (!popup || popup.closed || typeof popup == "undefined" || typeof popup.closed == "undefined") {
                        if (this.popups_are_disabled() == true) {
                            this.alert_to_disable_popup_blocker();
                        }
                    }
                },
                alert_to_disable_popup_blocker: function() {
                    errDialog("Error!", "You have popup blocker enabled. Please disable popup blocker and try again!");
                },
                popups_are_disabled: function() {
                    var isFolderSelected = '{!isFolderSelected}';
                    if (isFolderSelected == 'true') {                        
                        errDialog("Error!", "You can\'t download a folder. Please check your selection list and try again!");
                    } else {
                        popup = window.open("{!URLFOR($Page.cg__DownloadAppletPage)}?selectedIdNamePairs={!JSENCODE(selectedIdNamePairs)}&objectId=S3Object", "downloadManager", "width=640,height=490");
                        
                        if (!popup || popup.closed || typeof popup == "undefined" || typeof popup.closed == "undefined") {
                            return true;
                        }
                        popup.focus();
                        if (navigator && (navigator.userAgent.toLowerCase()).indexOf("chrome") > -1) {
                            var on_load_test = function() {
                                downloadManagerPopup.test_chrome_popups(popup);
                            };
                            var timer = setTimeout(on_load_test, 1000);
                            return;
                        }
                    }
                },
                test_chrome_popups: function(popup) {
                    if (popup && popup.screenX != 0) {
                        return true;
                    }
                    this.alert_to_disable_popup_blocker();
                }
            };
            </script>
        </apex:outputPanel>
        
        <apex:outputPanel id="zipAndDownloadPB">
            <script type="text/javascript">
            var selectedItemsJson = '{!selectedItemsJson}';
            
            
            selectedItemsJson = selectedItemsJson.replace(/(&quot\;)/g,"\"");
            //selectedItemsJson = jQuery.parseJSON(selectedItemsJson);
            
            var zipAndDownloadFile = function() {                
               
                xhttp = new XMLHttpRequest();
                xhttp.onreadystatechange = function() {
                    var a;
                    if (xhttp.readyState === 4 && xhttp.status === 200) {
                        a = document.createElement('a');
                        a.href = window.URL.createObjectURL(xhttp.response);
                        a.download = "test.zip";
                        a.style.display = 'none';
                        document.body.appendChild(a);                        
                        a.click();
                        $cq(a).remove();
                        $cq("#zipAndDownloadStatusPanel").fadeOut();
                    }
                };
                
                xhttp.open("POST", "https://zip.cyangate.com/api/v1/zip");
                xhttp.setRequestHeader("Content-Type", "application/json");
                xhttp.responseType = 'blob';
                xhttp.send(selectedItemsJson);
                $cq(".zipAndDownloadStatusText").html(" Files are zipping...");
               
                
            }
            
            var issuePostRequest = function() {
                // SA- Do not submit the form if Cpu Time Limit or Query Limit exceeded. 
                
                if(selectedItemsJson!='querylimitexceeded' && selectedItemsJson!='cputimelimitexceeded'){
                    var form = $cq("#zipAndDownloadForm")[0];
                    $cq("#zipAndDownloadFormFileListJson").val(selectedItemsJson);
                    form.submit();
                    $cq("#zipAndDownloadStatusPanel").fadeOut();
                }
                else{
                    $cq("#zipAndDownloadStatusPanel").fadeOut();
                }
            }
            
            var showDownloadStatus = function(){
                $cq(".zipAndDownloadStatusText").html(" Files are preparing...");
                $cq("#zipAndDownloadStatusPanel").fadeIn();
            }
            </script>
            
            <form id="zipAndDownloadForm" method="POST" target="_blank" action="https://zip.cyangate.com/api/v1/zip" style="display: none; ">
                <input id="zipAndDownloadFormFileListJson" name="fileListJson" value="" />
                <input type="submit" value="Send" />
            </form>
        </apex:outputPanel>
        
        
        <apex:outputPanel style="height:100%" rendered="{!NOT(fileAccessible)}">
            You do not have permissions to access S-Drive data!
        </apex:outputPanel>
        <apex:pageBlock rendered="{!messageAvailable}">
            <apex:outputText id="msg" value="{!message}"></apex:outputText>
        </apex:pageBlock>
        <table id="contentTable">
            <tr>
                <td id="foldersCell">
                    <apex:pageBlock rendered="{!fileAccessible}">
                        <div class="pageBlockTitle"><a href="#" class="standart-link" onclick="return gotoHomeAction(); return false;"><i class="fa fa-home fa-1x"></i> Folders</a></div>
                        <div id="treeViewFolder"></div>
                    </apex:pageBlock>
                </td>
                <td id="filesCell">
                    
                    <apex:form >
                        <apex:actionRegion >
                            <apex:pageBlock id="FileListPage" rendered="{!fileAccessible}">
                                
                                <apex:actionStatus id="processStatus" startStyleClass="actionStatusContainer" >
                                    <apex:facet name="start" >
                                        <div class="actionStatusClass">
                                            <i class="fa fa-spinner fa-pulse fa-1x fa-fw"></i> Processing...
                                        </div>
                                    </apex:facet>
                                </apex:actionStatus>
                                
                                <div id="zipAndDownloadStatusPanel" class="actionStatusClass" >
                                    <i class="fa fa-spinner fa-pulse fa-1x fa-fw"></i>
                                    <span class="zipAndDownloadStatusText"></span>
                                </div>
                                
                                <apex:actionFunction name="gotoHomeAction"      action="{!goToHomeFolder}" reRender="FileList,cutCopyPanelPB" status="processStatus" ></apex:actionFunction>
                                <apex:actionFunction name="newFolderAction"     onComplete="showNewFolderPanel();" reRender="newFolderPanelPB" status="processStatus" />
                                <apex:actionFunction name="displayUploadWidget" action="{!displayUploadWidget}" reRender="uploadPanelPB" onComplete="displayUpload();" status="processStatus" />
                                <apex:actionFunction name="calculateSelectedIdNamePairs" action="{!calculateSelectedIdNamePairs}" reRender="initDownloadManager" onComplete="downloadManagerPopup.init();" status="processStatus" />
                                <apex:actionFunction name="getSelectedItemsJson" action="{!downloadFilesAsZip}" reRender="zipAndDownloadPB,FileList" onComplete="issuePostRequest();" ></apex:actionFunction>
                                <apex:actionFunction name="downloadFolderAsZipAF" action="{!downloadFolderAsZip}" reRender="zipAndDownloadPB,FileList" onComplete="issuePostRequest();" >
                                    <apex:param name="attachmentFileId" value="" />
                                </apex:actionFunction>
                                <apex:actionFunction name="emailSelected"       action="{!emailSelected}" reRender="emailPanelPB" onComplete="showEmailPanel();" status="processStatus" />
                                <apex:actionFunction name="tryDeleteSelected"   action="{!tryDeleteSelected}" reRender="confirmDeletePanelPB,sdriveToolBar" onComplete="showConfirmDeletePanel();" status="processStatus" />
                                <apex:actionFunction name="cutSelected"         action="{!cutSelected}"     oncomplete="pasteButtonCheck()" reRender="cutCopyPanelPB,sdriveToolBar" status="processStatus" />
                                <apex:actionFunction name="copySelected"        action="{!copySelected}" oncomplete="pasteButtonCheck()" rerender="cutCopyPanelPB,sdriveToolBar" status="processStatus" />
                                <apex:actionFunction name="pasteSelectedFiles"  action="{!pasteSelectedFiles}" reRender="cutCopyPanelPB,sdriveToolBar" status="processStatus" onComplete="displayCopyPastePanel();" />
                                
                                <apex:actionFunction name="saveSettingsViewTypeAF" action="{!saveSettingsViewType}" reRender="" oncomplete="showStatus('success', '<strong>View Type</strong> configuration is saved!', 3)"></apex:actionFunction>
                                <apex:actionFunction name="saveSettingsSortFieldAF" action="{!saveSettingsSortField}" reRender="" oncomplete="showStatus('success', '<strong>Sort Field</strong> configuration is saved!', 3)"></apex:actionFunction>
                                <apex:actionFunction name="previewAF" action="{!chargePreviewFile}" reRender="previewPanelPB" onComplete="showPreviewPanel();" status="processStatus">
                                    <apex:param name="attachmentFileId" value="" />
                                </apex:actionFunction>
                                <apex:actionFunction name="refreshPreviewAF" action="{!refreshPreviewFile}" reRender="previewPanelPB" onComplete="showPreviewPanel();" status="processStatus" />
                                <apex:actionFunction name="changeFolderAF" action="{!changeFolder}" reRender="FileList" status="processStatus">
                                    <apex:param name="objectId" assignTo="{!objectIdAT}" value=""/>
                                </apex:actionFunction>
                                <apex:actionFunction name="sortAF" action="{!doSort}" reRender="FileList" status="processStatus">
                                    <apex:param name="sortField" value="" assignTo="{!sortFieldAT}" />
                                </apex:actionFunction>
                                <apex:actionFunction name="deleteAF" action="{!confirmDelete}" reRender="confirmDeletePanelPB" onComplete="showConfirmDeletePanel();" status="processStatus">
                                    <apex:param name="attachmentFileId" value="" />
                                    <apex:param name="attachmentContentType" value="" />
                                </apex:actionFunction>
                                <apex:actionFunction name="updateFileSelecitonsAF" reRender="SelectionUpdate"></apex:actionFunction>
                                <apex:actionFunction name="downloadAF" action="{!downloadFile}" reRender="downloadArea" >
                                    <apex:param name="attachmentFileId" value="" />
                                    <apex:param name="fileName" value="" />
                                </apex:actionFunction>
                                

                                
                                <apex:outputPanel id="SelectionUpdate"></apex:outputPanel>
                                <apex:outputPanel id="jsTreePanel">
                                    <script>
                                    loadJsTreeComponent({!jsTreeData});
                                    </script>
                                </apex:outputPanel>
                                
                                <apex:outputPanel id="FileList">
                                    <apex:pageMessages />
                                    <script>
                                    toolBarButtonsArrangeClass();
                                    </script>
                                    <apex:pageMessages rendered="{!isCustomMessage}" />
                                    
                                    <apex:outputPanel styleClass="breadcrumbStyle top">
                                        <div style="float: left; font-size:12px; line-height: 25px; padding-right: 20px;">
                                            <apex:commandLink id="homeLink" value="Home" action="{!changeFolder}" reRender="FileList,cutCopyPanelPB" status="processStatus" rendered="{!NOT(isSearchInProgress && isSearchResultsFound)}" styleClass="standart-link">
                                                <apex:param name="objectId" assignTo="{!objectIdAT}" value="" />
                                            </apex:commandLink>
                                            <apex:commandLink id="homeLinkWhileSearching" value="Back to Home" action="{!changeFolder}" reRender="FileList" status="processStatus" rendered="{!isSearchInProgress && isSearchResultsFound}" styleClass="standart-link"/>
                                            <apex:repeat value="{!folderHistoryStack}" var="folder" id="breadCrumbRepeater" rendered="{!NOT(isSearchInProgress && isSearchResultsFound)}">
                                                &nbsp;/&nbsp;&nbsp;
                                                <apex:commandLink value="{!folder.Name}" action="{!changeFolder}" reRender="FileList, cutCopyPanelPB" status="processStatus" styleClass="standart-link">
                                                    <apex:param name="objectId" assignTo="{!objectIdAT}" value="{!folder.Id}" />
                                                </apex:commandLink>
                                            </apex:repeat> 
                                        </div>
                                        
                                        <apex:outputPanel rendered="{!isVersionedBucket&&isShowVersions}" layout="none">
                                            <div style="display: inline-block; line-height: 25px;">
                                                <i class="fa fa-ellipsis-v"></i>
                                                <apex:outputLabel value="Versions of <strong>{!versionFileName}</strong>" escape="false" style="padding-left: 15px;"></apex:outputLabel>
                                            </div>
                                        </apex:outputPanel>
                                        
                                        <script>
                                        
                                        function handleEmptySearchKey() {
                                            String.prototype.trim = function() {
                                                return this.replace(/^\s*/, "").replace(/\s*$/, "");
                                            }
                                            var searchKey = document.getElementById('{!$Component.inputBoxSearch}').value;
                                            var trimmedKey = searchKey.trim();
                                            if (trimmedKey == "") {
                                                errDialog("Error!","Search keyword cannot be empty!");
                                            } else if (trimmedKey.length == 1 || trimmedKey.replace(/[*?]/g, "").length < 2) {
                                                errDialog("Error!","Search keyword must be longer than one character!");
                                            } else {
                                                searchFileList();
                                            }
                                        }
                                        
                                        function handleKeysOnSearchTextBox(ev) {
                                            if (window.event && window.event.keyCode == 13 || ev.which == 13) {
                                                handleEmptySearchKey();
                                                return false;
                                            } else {
                                                return true;
                                            }
                                        }
                                        
                                        </script>
                                        <div align="center" style="width: 150px; position: absolute; margin-left: -75px; left: 50%; top: 10px;">
                                            <apex:outputText value="No Results Found!" style="color:red;font-size:16px;" rendered="{!(isSearchInProgress) && NOT(isSearchResultsFound) }" />
                                            <apex:outputText value="{!searchResultCount} Result(s) Found" style="font-size:16px" rendered="{!(isSearchInProgress) && isSearchResultsFound}" />
                                        </div>
                                        
                                        <apex:actionFunction name="cg_navigate" action="{!navigateToPage}" rerender="FileList" status="processStatus">
                                            <apex:param name="pageNum" assignTo="{!pageNumAT}" value="" />
                                        </apex:actionFunction>
                                        <apex:actionFunction name="copyS3VersionFile" action="{!copyS3VersionFile}" rerender="FileList" status="processStatus"></apex:actionFunction>
                                        
                                        <apex:outputPanel layout="block" id="topPagination" rendered="{!showPages && NOT(isSearchInProgress)}" styleClass="paginationStyle paginationTop">
                                            <span style="padding-right: 6px;vertical-align: middle;"><strong>{!totalItems}</strong> items in <strong>{!pagesCount}</strong> pages </span>
                                            
                                            <apex:outputPanel onclick="cg_navigate('1')" rendered="{!(1 != pageNumAT)}" styleClass="btn"><i class="fa fa-step-backward" /></apex:outputPanel>
                                            <apex:outputPanel onclick="cg_navigate('{!pageNumAT - 1}')" rendered="{!(1 != pageNumAT)}" styleClass="btn"><i class="fa fa-caret-left fa-lg" /></apex:outputPanel>
                                            
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt > 3}">...</apex:outputPanel>
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt > 2}">
                                                <apex:outputPanel onclick="cg_navigate('{!pageNumAt - 2}')" styleClass="btn">{!pageNumAt - 2}</apex:outputPanel>
                                            </apex:outputPanel>
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt > 1}">
                                                <apex:outputPanel onclick="cg_navigate('{!pageNumAt - 1}')" styleClass="btn">{!pageNumAt - 1}</apex:outputPanel>
                                            </apex:outputPanel>
                                            
                                            <apex:selectList value="{!pageNumAT}" size="1" styleClass="btn btnSelected" onchange="cg_navigate(this.value)">
                                                <apex:selectOptions value="{!pageOptions}"/>
                                            </apex:selectList>
                                            
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt < pagesCount}">
                                                <apex:outputPanel onclick="cg_navigate('{!pageNumAt + 1}')" styleClass="btn">{!pageNumAt + 1}</apex:outputPanel>
                                            </apex:outputPanel>
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt < pagesCount - 1}">
                                                <apex:outputPanel onclick="cg_navigate('{!pageNumAt + 2}')" styleClass="btn">{!pageNumAt + 2}</apex:outputPanel>
                                            </apex:outputPanel>
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt < pagesCount - 2}">...</apex:outputPanel>
                                            
                                            <apex:outputPanel onclick="cg_navigate('{!pageNumAT + 1}')" rendered="{!(pagesCount != pageNumAT)}" styleClass="btn"><i class="fa fa-caret-right fa-lg" /></apex:outputPanel>
                                            <apex:outputPanel onclick="cg_navigate('{!pagesCount}')" rendered="{!(pagesCount != pageNumAT)}" styleClass="btn"><i class="fa fa-step-forward" /></apex:outputPanel>
                                        </apex:outputPanel>
                                        
                                        <div class="searchBoxWrapper">
                                            <apex:inputText id="inputBoxSearch" styleClass="inputBoxSearchStyle" value="{!searchKeyword}" onkeypress="return handleKeysOnSearchTextBox(event)" html-placeholder="Search" />
                                            <apex:image id="searchIcon" value="{!$Resource.cg__SearchIcon}" styleClass="searchbox_submit" onclick="handleEmptySearchKey()" />
                                            <apex:actionFunction action="{!searchKeywordResult}" rerender="FileList" name="searchFileList" status="processStatus" />
                                        </div>
                                        <div style="clear: both;"></div>
                                    </apex:outputPanel>
                                    
                                    <apex:outputPanel id="sdriveToolBar" styleClass="sdriveToolBar" layout="block" rendered="{!NOT(isShowVersions)}">
                                    
                                        
                                        <span class="btn-dropdown">
                                            <a href="#" id="select-all-btn" class="card-toolbar-btn btn btn-dropdown-left nonderline" title="Selection Menu" onclick="event.preventDefault(); selectAllBtnAction();">
                                                <i class="fa fa-square-o fa-lg" ></i>
                                            </a>
                                            <a href="#" class="card-toolbar-btn btn nonderline btn-dropdown-right" title="Selection Menu" onclick="event.preventDefault(); openCardSelectionMenu(event, this);">
                                                <i class="fa fa-caret-down fa-lg" />
                                            </a>
                                            <ul id="selectionMenu" class="actionMenu" style="left: 0">
                                                <li>
                                                    <a href="#" class="nonderline" onclick="event.preventDefault(); selectAllItems();">
                                                        <i class="fa fa-check-square-o fa-1x" /> All
                                                    </a>
                                                </li>
                                                <li>
                                                    <a href="#" class="nonderline" onclick="event.preventDefault(); deselectAllItems();">
                                                        <i class="fa fa-square-o fa-1x" /> None
                                                    </a>
                                                </li>
                                            </ul>
                                        </span>
                                        <span class="btn-dropdown">
                                            <a href="#" class="card-toolbar-btn btn nonderline" title="Sort By Menu" onclick="event.preventDefault(); openCardSelectionMenu(event, this);">
                                                <i class="fa fa-sort-alpha-asc fa-1x" style="padding-right: 3px;"></i><i class="fa fa-caret-down fa-lg" />
                                            </a> 
                                            <ul id="sortByMenu" class="actionMenu" style="left: 0">
                                                <li>
                                                    <apex:outputPanel rendered="{!sortFieldAT == 'cg__File_Name__c' }" styleClass="sort-field-mark"><i class="fa fa-sort-alpha-{!order} fa-lg"/></apex:outputPanel>
                                                    <a href="#" class="nonderline" onclick="event.preventDefault(); sortAF('cg__File_Name__c');">
                                                        File Name
                                                    </a>
                                                </li>
                                                <li>
                                                    <apex:outputPanel rendered="{!sortFieldAT == 'cg__Content_Type__c' }" styleClass="sort-field-mark"><i class="fa fa-sort-alpha-{!order} fa-lg"/></apex:outputPanel>
                                                    <a href="#" class="nonderline" onclick="event.preventDefault(); sortAF('cg__Content_Type__c');">
                                                        Content Type
                                                    </a>
                                                </li>
                                                <apex:repeat value="{!configuredFields}" var="field">
                                                    <apex:outputPanel rendered="{!NOT(field.fieldType == 'TEXTAREA' || field.fieldType == 'MULTIPICKLIST')}">
                                                        <li>
                                                            <apex:outputPanel rendered="{!sortFieldAT == field.fieldId  }" styleClass="sort-field-mark"><i class="fa fa-sort-alpha-{!order} fa-lg"/></apex:outputPanel>
                                                            <a href="#" class="nonderline" onclick="event.preventDefault(); sortAF('{!field.fieldId}');">
                                                                {!field.fieldLabel}
                                                            </a>
                                                        </li>
                                                    </apex:outputPanel>
                                                </apex:repeat>
                                            </ul>
                                        </span>
                                        
                                        <span class="btn-seperator">
                                            <i class="fa fa-ellipsis-v" aria-hidden="true" ></i>
                                        </span>
                                        
                                        <a class="btn" onclick="return loadFolderItems(''); return false;" title="Go to Home folder"><i class="fa fa-home fa-lg"></i></a>
                                        <apex:outputPanel rendered="{!NOT(canAttach)}" layout="none">
                                            <apex:outputPanel rendered="{!NOT(isAppleDevice) && (fileCreatable && displayUploadAndCreateButtons && NOT(isSearchInProgress && isSearchResultsFound))}" layout="none">
                                                <a class="btn" onclick="return displayUploadWidget(); return false;" title="Upload file(s) to cloud!"><i class="fa fa-cloud-upload fa-lg"></i></a>
                                            </apex:outputPanel>
                                            <apex:outputPanel rendered="{!NOT(isAppleDevice) && enableDownloadManager}" layout="none">
                                                <a class="btnDisabled btncandisable" onclick="canalizeDownload(); return false;" title="Download selected file(s)"><i class="fa fa-cloud-download fa-lg"></i></a>
                                            </apex:outputPanel>
                                        </apex:outputPanel>
                                        
                                        <apex:outputPanel rendered="{!(enableEmailSDriveTab && (isCustomerPortalUser && NOT(disableEmailSDriveTabPortal))) || (enableEmailSDriveTab && NOT(isCustomerPortalUser))}" layout="none">
                                            <a class="btnDisabled btncandisable" onclick="return emailSelected(); return false;" title="Email selected file(s)"><i class="fa fa-envelope fa-lg"></i></a>
                                        </apex:outputPanel>
                                        
                                        <apex:outputPanel rendered="{!NOT(canAttach)}" layout="none">
                                            <span class="btn-seperator">
                                                <i class="fa fa-ellipsis-v" aria-hidden="true" ></i>
                                            </span>
                                            <apex:outputPanel rendered="{!fileCreatable && displayUploadAndCreateButtons && NOT(isSearchInProgress && isSearchResultsFound)}" layout="none">
                                                <a class="btn" onclick="newFolderAction(); return false;" title="Create folder"><i class="fa fa-folder-open fa-lg"></i></a>
                                            </apex:outputPanel>
                                            <apex:outputPanel rendered="{!fileDeletable}" layout="none">
                                                <a class="btnDisabled btncandisable removeButton" onclick="return tryDeleteSelected(); return false;"><i class="fa fa-remove fa-lg" title="Delete selected file(s)"></i></a>
                                            </apex:outputPanel>
                                            <apex:outputPanel rendered="{!fileCreatable && fileUpdateable && fileDeletable}" layout="none">
                                                <span class="btn-seperator">
                                                    <i class="fa fa-ellipsis-v" aria-hidden="true" ></i>
                                                </span>
                                                <apex:outputPanel rendered="{!displayUploadAndCreateButtons}" layout="none">
                                                    <a class="btnDisabled btncandisable" onclick="return cutSelected(); return false;" title="Cut selected file(s)"><i class="fa fa-cut fa-lg"></i></a>
                                                </apex:outputPanel>
                                                <a class="btnDisabled btncandisable" onclick="return copySelected(); return false;" title="Copy selected file(s)"><i class="fa fa-copy fa-lg"></i></a>
                                                <apex:outputPanel rendered="{!NOT(isSearchInProgress && isSearchResultsFound) && displayUploadAndCreateButtons}" layout="none">
                                                    <a class="{! IF(cutCopyItems.size > 0, 'btn', 'btnDisabled')} " id="toolbarPasteButton" onclick="return pasteSelectedFiles(); return false;" title="Paste cutted/copied file(s)"><i class="fa fa-paste fa-lg"></i></a>
                                                </apex:outputPanel>
                                            </apex:outputPanel>
                                            
                                            <div class="card-toolbar-btn-container">
                                                <span class="btn-seperator">
                                                    <i class="fa fa-ellipsis-v" aria-hidden="true" ></i>
                                                </span>
                                                <span class="btn-dropdown">
                                                    <a href="#" class="card-toolbar-btn btn nonderline" title="Set views default behaviour." onclick="event.preventDefault(); openCardSelectionMenu(event, this);">
                                                        <i class="fa fa-cog fa-lg" style="padding-right: 3px;"></i>View<i class="fa fa-caret-down fa-lg"  style="padding-left: 3px;"/>
                                                    </a> 
                                                    <ul class="actionMenu" style="left: 0">
                                                        <apex:outputPanel layout="none" rendered="{!isPreviewEnabled}"> 
                                                            <li>
                                                                <a href="#" class="nonderline" onclick="event.preventDefault(); saveSettingsViewTypeAF();">
                                                                    <i class="fa fa-floppy-o fa-1x" />&nbsp;&nbsp;
                                                                    Set <strong>{!viewTypeActiveLabel}</strong> as default View Type
                                                                </a>
                                                            </li>
                                                        </apex:outputPanel>
                                                        <li>
                                                            <a href="#" class="nonderline" onclick="event.preventDefault(); saveSettingsSortFieldAF();">
                                                                <i class="fa fa-floppy-o fa-1x"/>&nbsp;&nbsp;
                                                                Set <strong>{!sortFieldLabel}</strong> as default Sort Field
                                                            </a>
                                                        </li>
                                                    </ul>
                                                </span>
                                            </div>
                                            
                                        </apex:outputPanel>
                                        
                                        <apex:outputPanel id="attachButtons" rendered="{!canAttach}">
                                            <span class="btn-seperator">
                                                <i class="fa fa-ellipsis-v" aria-hidden="true" ></i>
                                            </span>
                                            <apex:commandButton value="Attach File(s)" id="attachFilesButton" action="{!attach}" onclick="if(!anyFileSelected(this)){errDialog('Error!','Please select file(s) to attach!');return false;}" reRender="attachPanelPB" status="processStatus" onComplete="javascript:displayAttachPanel();return false;" />
                                            <apex:commandButton value="Go Back" id="cancelAttachButton" onclick="javascript:attachCompleted();return false;" />
                                        </apex:outputPanel>
                                        
                                        <apex:outputPanel rendered="{!isPreviewEnabled}">
                                            <div class="toggleViewToolbar">
                                                <apex:selectRadio value="{!viewTypeActive}" styleClass="toggleViewToolbarComp">
                                                    <apex:selectOption itemValue="list" itemLabel='<i class="fa fa-lg fa-align-justify" aria-hidden="true" title="List View">' itemEscaped="false" ></apex:selectOption>
                                                    <apex:selectOption itemValue="thumbnail" itemLabel='<i class="fa fa-lg fa-th-list" title="List with Thumbnails">' itemEscaped="false"></apex:selectOption>
                                                    <apex:selectOption itemValue="grid" itemLabel='<i class="fa fa-lg fa-th" title="Grid View">' itemEscaped="false"></apex:selectOption>
                                                    <apex:selectOption itemValue="card" itemLabel='<span class="card-view-btn blue" title="Card View"></span>' itemEscaped="false"></apex:selectOption>
                                                    <apex:actionSupport event="onchange" reRender="FileList" status="processStatus"/>
                                                </apex:selectRadio>
                                                
                                                <script>
                                                $cq(".toggleViewToolbar input").checkboxradio({
                                                    icon: false
                                                });
                                                $cq(".toggleViewToolbar label").addClass("btn");
                                                activeViewType = '{!viewTypeActive}';
                                                console.log("activeViewType: ", activeViewType);
                                                </script>
                                            </div>
                                        </apex:outputPanel>
                                        
                                        <script type="text/javascript">
                                        function getFileCreatable(){ return {!fileCreatable} };
                                        function getDisplayUploadAndCreateButtons(){ return {!displayUploadAndCreateButtons} };
                                        
                                        toolBarButtonsArrangeClass();
                                        </script>
                                        
                                        <span style="display: block;clear:both;"></span>
                                    </apex:outputPanel>
                                    
                                    
                                    <apex:outputPanel id="FileListView">
                                        
                                        <apex:outputPanel rendered="{! JSENCODE(viewTypeActive) == JSENCODE('card') || JSENCODE(viewTypeActive) == JSENCODE('grid') }" styleClass="{!viewTypeActive}-view">
                                            <div class="card-grid-container">
                                            <div id="card-grid">
                                                <apex:repeat value="{!files}" var="f">
                                                    <div class="card-item">
                                                        <apex:outputPanel id="card-panel">
                                                            <div class="card-item-content {!IF(f.checked, 'selected', 'deselected')}">
                                                                <div class="card-image-cotainer">
                                                                    <img class="card-thumbnail-img {!IF(f.contentType == 'Folder','folder-img','')}" src="{! IF(f.thumbnailUrl != '', f.thumbnailUrl, IF(f.contentType == 'Folder', URLFOR($Resource.sources, 'file-icons/512px/folder.png'), URLFOR($Resource.sources, 'file-icons/512px/default.jpg')))}" />
                                                                    <div class="card-buttons">
                                                                        <label class="card-select-label" title="Select item">
                                                                            <apex:inputCheckbox value="{!f.checked}" style="vertical-align: middle;" styleClass="file-checkbox" html-data-id="{!f.file.Id}" html-data-content-type="{!f.contentType}">
                                                                                <apex:actionSupport event="onclick" onsubmit="fileCheckboxClick(this)" reRender=""/>
                                                                            </apex:inputCheckbox>
                                                                        </label>
                                                                        <apex:outputPanel rendered="{!f.contentType == 'Folder'}">
                                                                            <a href="#" class="card-preview-btn" onclick="event.preventDefault(); changeFolderAF('{!f.file.Id}');" title="Click to open folder">
                                                                                <span class="card-preview-btn-inside">
                                                                                    <i class="fa fa-folder-open fa-lg"></i>
                                                                                </span>
                                                                            </a>
                                                                        </apex:outputPanel>
                                                                        <apex:outputPanel rendered="{!f.contentType != 'Folder'}">
                                                                            <a href="#" class="card-preview-btn" onclick="event.preventDefault(); previewAF('{!f.file.Id}');" title="Click to preview item">
                                                                                <span class="card-preview-btn-inside">
                                                                                    <i class="fa fa-search-plus fa-lg"></i>
                                                                                </span>
                                                                            </a>
                                                                        </apex:outputPanel>
                                                                    </div>
                                                                </div>
                                                                <div class="card-meta-data">
                                                                    <apex:image styleClass="card-meta-icon" title="{!f.contentType}" url="{!URLFOR($Resource.cg__sources, 'file-icons/32px/' + f.iconName)}"></apex:image>
                                                                    <apex:outputText styleClass="card-content-type" value="{!f.contentType + '<br>' + f.fileSize}" escape="false"></apex:outputText>
                                                                    <div style="clear: both;"></div>
                                                                    <div class="card-meta-name">
                                                                        <apex:outputText styleClass="ellipsis card-meta-name-span" title="{!f.fileName}" value="{!f.fileName}"></apex:outputText>
                                                                    </div>
                                                                </div>
                                                                <div class="card-item-toolbar">
                                                                    <apex:outputPanel rendered="{!(f.contentType != 'Folder')}"  layout="none">
                                                                        <a href="#" class="card-item-btn btn" title="Download" onclick="event.preventDefault(); downloadAF('{!f.file.Id}', '{!f.fileName}'); return false;" ><i class="fa fa-download fa-lg" /></a>
                                                                    </apex:outputPanel>
                                                                    <apex:outputPanel rendered="{!(f.contentType == 'Folder')}"  layout="none">
                                                                        <a href="#" class="card-item-btn btn" title="Download Folder as a zip file" onclick="event.preventDefault(); downloadFolderAsZipAF('{!f.file.id}'); showDownloadStatus(); return false;" ><i class="fa fa-download fa-lg" /></a>
                                                                        <a href="#" class="card-item-btn btn" title="Details" onclick="event.preventDefault(); previewAF('{!f.file.Id}');" ><i class="fa fa-search-plus fa-lg" /></a>
                                                                    </apex:outputPanel>
                                                                    <apex:outputPanel rendered="{!f.contentType != 'Folder'}"  layout="none">
                                                                        <a href="#" class="card-item-btn btn" title="Edit Fields" onclick="event.preventDefault(); editAF('{!f.file.Id}'); return false;" ><i class="fa fa-pencil-square-o fa-lg" /></a>
                                                                    </apex:outputPanel>
                                                                    <a href="#" class="card-item-btn btn" title="Delete" onclick="event.preventDefault(); deleteAF('{!f.file.Id}', '{!f.contentType}'); return false;"><i class="fa fa-times fa-lg" /></a>
                                                                    <span style="position: relative; float: right;">
                                                                        <a href="#" class="card-item-btn btn" title="Actions Menu" onclick="event.preventDefault(); openCardActionMenu(event, this);"><i class="fa fa-caret-down fa-lg" /></a>
                                                                        <ul class="card-action-menu actionMenu">
                                                                            <li class="card-action-menu-header">A C T I O N S</li>
                                                                            <apex:outputPanel rendered="{!(f.contentType != 'Folder')}" layout="none">
                                                                                <li>
                                                                                    <apex:commandLink value="Download" title="Download File" action="{!downloadFile}" reRender="downloadArea">
                                                                                        <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                                        <apex:param name="fileName" value="{!f.fileName}" />
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            <apex:outputPanel rendered="{!(f.contentType != 'Folder')}" layout="none">
                                                                                <li>
                                                                                    <apex:commandLink value="Open" title="Open File in New Window" action="{!openFile}" reRender="openArea" onComplete="openFilePopupWarning.init()">
                                                                                        <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            <apex:outputPanel rendered="{!(f.contentType != 'Folder') && NOT(disableCopyUrlSDriveTab)}"  layout="none">
                                                                                <li >
                                                                                    <apex:commandLink value="Copy URL" title="Copy URL to Clipboard" action="{!retrieveCopyUrl}" reRender="copyUrlPanelPB" onComplete="showCopyUrlPanel();">
                                                                                        <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                                        <apex:param name="fileName" value="{!f.fileName}" />
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            
                                                                            <apex:outputPanel rendered="{!(f.contentType == 'Folder')}"  layout="none">
                                                                                <li>
                                                                                    <apex:commandLink value="Download" title="Download Folder as a zip file" action="{!downloadFolderAsZip}" reRender="zipAndDownloadPB,FileList" onComplete="issuePostRequest();" onclick="showDownloadStatus();">
                                                                                        <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            <apex:outputPanel rendered="{!f.contentType == 'Folder'}" layout="none">
                                                                                <li>
                                                                                    <apex:commandLink value="Open" title="Open Folder" action="{!changeFolder}" reRender="FileList" >
                                                                                        <apex:param name="objectId" assignTo="{!objectIdAT}" value="{!f.file.Id}"/> 
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            <li >
                                                                                <apex:commandLink value="Details" title="Show details of file" action="{!chargePreviewFile}" reRender="previewPanelPB" onComplete="showPreviewPanel();" status="processStatus">
                                                                                    <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                                </apex:commandLink>
                                                                            </li>                                                                        
                                                                            <li class="menu-seperator">
                                                                                <i class="fa fa-ellipsis-h fa-lg"></i>
                                                                            </li>
                                                                            
                                                                            <apex:outputPanel rendered="{!fileUpdateable}" layout="none">
                                                                                <li>
                                                                                    <apex:commandLink value="Edit" title="Edit Description" action="{!editFieldValues}" reRender="editPanelPB" onComplete="showEditPanel();" status="processStatus">
                                                                                        <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            <apex:outputPanel rendered="{!fileUpdateable}"  layout="none">
                                                                                <li >
                                                                                    <apex:commandLink value="Rename" title="Rename Item" action="{!editFieldValues}" reRender="renamePanelPB" onComplete="showRenamePanel();" status="processStatus">
                                                                                        <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            <apex:outputPanel rendered="{!(shareEnabled) && NOT(isShowVersions)}"  layout="none">
                                                                                <li >
                                                                                    <apex:commandLink value="Share" title="Edit Share Settings" action="{!loadShareWidget}" reRender="sharePanelPB" onComplete="showSharePanel();" status="processStatus">
                                                                                        <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            <apex:outputPanel rendered="{!fileDeletable}" layout="none">
                                                                                <li>
                                                                                    <apex:commandLink value="Delete" title="Delete Item" action="{!confirmDelete}" reRender="confirmDeletePanelPB" onComplete="showConfirmDeletePanel();" status="processStatus">
                                                                                        <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                                        <apex:param name="attachmentContentType" value="{!f.contentType}" />
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            
                                                                            <apex:outputPanel rendered="{!(f.contentType != 'Folder')}" layout="none">
                                                                                <li class="menu-seperator">
                                                                                    <i class="fa fa-ellipsis-h fa-lg"></i>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            
                                                                            <apex:outputPanel rendered="{!(f.contentType != 'Folder')&&(isVersionedBucket)&&NOT(isShowVersions)&&NOT(isAppleDevice) && (fileCreatable && displayUploadAndCreateButtons)}" layout="none">
                                                                                <li >
                                                                                    <apex:commandLink value="Upload New Version" title="Upload New Version" reRender="uploadPanelPB" action="{!displayVersionUploadWidget}" onComplete="displayUpload();" status="processStatus">
                                                                                        <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            <apex:outputPanel rendered="{!(f.contentType != 'Folder')&&(isVersionedBucket)&&NOT(isShowVersions)&&NOT(isAppleDevice) && (fileCreatable)}" layout="none">
                                                                                <li >
                                                                                    <apex:commandLink value="Previous Versions" title="Previous Versions" reRender="FileList" action="{!loadVersions}" status="processStatus" >
                                                                                        <apex:param name="versionFileId" value="{!f.file.Id}" />
                                                                                        <apex:param name="versionFileName" value="{!f.fileName}" />
                                                                                        
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            <apex:outputPanel rendered="{!(f.contentType != 'Folder')&&(isVersionedBucket)&&(isShowVersions)&&(f.file.Id != versionFileId)&&NOT(isAppleDevice) && (fileCreatable && fileUpdateable)}" layout="none">
                                                                                <li >
                                                                                    <apex:commandLink value="Set Current" title="Set Current" reRender="FileList" action="{!copyVersionObject}" status="processStatus" onComplete="copyS3VersionFile();">
                                                                                        <apex:param name="versionFileIdToCurrent" value="{!f.file.Id}" />
                                                                                    </apex:commandLink>
                                                                                </li>
                                                                            </apex:outputPanel>
                                                                            <li class="card-action-menu-header"></li>
                                                                        </ul>
                                                                    </span>
                                                                </div>
                                                            </div>
                                                        </apex:outputPanel>
                                                    </div>
                                                </apex:repeat>
                                            </div>
                                            </div>
                                            <script type="text/javascript">
                                            var g = $cq('#card-grid');
                                            g.removeClass().addClass("grid-item-" + Math.round(g.width() / 200));
                                            masonryIt();
                                            </script>
                                        </apex:outputPanel>
                                        
                                        <apex:pageBlockTable id="filesPB" value="{!files}" var="f" styleClass="FileListTable" rendered="{! viewTypeActive == 'list' || viewTypeActive == 'thumbnail' }">
                                            <apex:column width="25px" headerClass="cg_sdrive_checkbox" rendered="{!NOT(isShowVersions)}" styleClass="list-column {! IF(f.checked, 'selected', 'deselected')}" style="padding: 0px; width: 25px; min-width: 25px;">
                                                <apex:facet name="header">
                                                </apex:facet>
                                                <label class="list-select-label"> 
                                                    <apex:inputCheckbox value="{!f.checked}" id="checkdone" styleClass="file-checkbox" html-data-id="{!f.file.Id}" html-data-content-type="{!f.contentType}">
                                                        <apex:actionSupport event="onclick" onsubmit="fileCheckChangeEvent('{!f.id}');" reRender="" /> 
                                                    </apex:inputCheckbox>
                                                </label>
                                            </apex:column>
                                            <apex:column headerValue="Thumbnail" rendered="{!viewTypeActive == 'thumbnail'}" styleClass="list-column {! IF(f.checked, 'selected', 'deselected')}" width="120">
                                                <apex:outputPanel layout="none" rendered="{!f.contentType != 'Folder'}">
                                                    <div align="center">
                                                        <div class="thumbnail-frame" >
                                                            <img class="thumbnail-image" src="{!IF(f.thumbnailUrl != '', f.thumbnailUrl, URLFOR($Resource.sources, 'file-icons/512px/no-thumbnail.jpg'))}" data-preview-url="{!f.previewUrl}" />                                    
                                                            <a href="#" class="card-preview-btn" onclick="event.preventDefault(); previewAF('{!f.file.Id}');" title="Click to show preview of item.">
                                                                <span class="card-preview-btn-inside">
                                                                    <i class="fa fa-search-plus fa-lg"></i>
                                                                </span>
                                                            </a>
                                                        </div>
                                                    </div>
                                                </apex:outputPanel>
                                                <apex:outputPanel layout="none" rendered="{!f.contentType == 'Folder'}">
                                                    <div align="center">
                                                        <div class="thumbnail-frame folder" >
                                                            <img class="thumbnail-image" src="{! URLFOR($Resource.sources, 'file-icons/512px/folder.png') }" />                                    
                                                            <a href="#" class="card-preview-btn" onclick="event.preventDefault(); changeFolderAF('{!f.file.Id}');" title="Click to open folder.">
                                                                <span class="card-preview-btn-inside">
                                                                    <i class="fa fa-folder-open fa-lg"></i>
                                                                </span>
                                                            </a>
                                                        </div>
                                                    </div>
                                                </apex:outputPanel>
                                            </apex:column>
                                            <apex:column width="20px" headerValue="Actions" headerClass="cg_sdrive_actions" styleClass="list-column {! IF(f.checked, 'selected', 'deselected')}">
                                                <apex:outputPanel layout="inline" rendered="{!(f.contentType != 'Folder') || fileUpdateable || shareEnabled || fileDeletable}">
                                                    <div style="text-align: center; white-space:nowrap;" class="list-item-toolbar">
                                                        <apex:outputPanel rendered="{! (f.contentType != 'Folder')}"  layout="none">
                                                            <a href="#" class="list-item-btn btn" title="Download" onclick="event.preventDefault(); downloadAF('{!f.file.Id}'); return false;" ><i class="fa fa-download fa-1x" /></a>
                                                        </apex:outputPanel>
                                                        <apex:outputPanel rendered="{!(f.contentType == 'Folder')}"  layout="none">
                                                            <a href="#" class="list-item-btn btn" title="Download Folder as a zip file" onclick="event.preventDefault(); downloadFolderAsZipAF('{!f.file.id}'); showDownloadStatus(); return false;"><i class="fa fa-download fa-1x" /></a>
                                                            <a href="#" class="list-item-btn btn" title="Details" onclick="event.preventDefault(); previewAF('{!f.file.Id}'); return false;" ><i class="fa fa-search-plus fa-lg" /></a>
                                                        </apex:outputPanel>
                                                        <apex:outputPanel rendered="{!(f.contentType != 'Folder')}"  layout="none">
                                                            <a href="#" class="list-item-btn btn" title="Delete" onclick="event.preventDefault(); deleteAF('{!f.file.Id}', '{!f.contentType}'); return false;" style="color: #bb1133"><i class="fa fa-times fa-1x" /></a>
                                                        </apex:outputPanel>
                                                        <span style="position: relative;float: right;">
                                                            <a id="actionMenuOf_{!f.file.Id}" href="#" class="list-item-btn btn" title="Actions Menu" onclick="event.preventDefault(); openCardActionMenu(event, this);"><i class="fa fa-caret-down fa-lg" /></a>
                                                            <ul class="actionMenu">
                                                                <apex:outputPanel rendered="{!(f.contentType != 'Folder')}" layout="none">
                                                                    <li>
                                                                        <apex:commandLink value="Download" title="Download File" action="{!downloadFile}" reRender="downloadArea">
                                                                            <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                            <apex:param name="fileName" value="{!f.fileName}" />
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!(f.contentType != 'Folder')}" layout="none">
                                                                    <li>
                                                                        <apex:commandLink value="Open" title="Open File in New Window" action="{!openFile}" reRender="openArea" onComplete="openFilePopupWarning.init()">
                                                                            <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!(f.contentType != 'Folder') && NOT(disableCopyUrlSDriveTab)}"  layout="none">
                                                                    <li >
                                                                        <apex:commandLink value="Copy URL" title="Copy URL to Clipboard" action="{!retrieveCopyUrl}" reRender="copyUrlPanelPB" onComplete="showCopyUrlPanel();">
                                                                            <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                            <apex:param name="fileName" value="{!f.fileName}" />
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                
                                                                <apex:outputPanel rendered="{!(f.contentType == 'Folder')}"  layout="none">
                                                                    <li>
                                                                        <apex:commandLink value="Download" title="Download Folder as a zip file" action="{!downloadFolderAsZip}" reRender="zipAndDownloadPB,FileList" onComplete="issuePostRequest();" onclick="showDownloadStatus();">
                                                                            <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!f.contentType == 'Folder'}" layout="none">
                                                                    <li>
                                                                        <apex:commandLink value="Open" title="Open Folder" action="{!changeFolder}" reRender="FileList" >
                                                                            <apex:param name="objectId" assignTo="{!objectIdAT}" value="{!f.file.Id}"/> 
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                <li >
                                                                    <apex:commandLink value="Details" title="Show details of file" action="{!chargePreviewFile}" reRender="previewPanelPB" onComplete="showPreviewPanel();" status="processStatus">
                                                                        <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                    </apex:commandLink>
                                                                </li>                                                                        
                                                                <li class="menu-seperator">
                                                                    <i class="fa fa-ellipsis-h fa-lg"></i>
                                                                </li>
                                                                
                                                                <apex:outputPanel rendered="{!fileUpdateable}" layout="none">
                                                                    <li>
                                                                        <apex:commandLink value="Edit" title="Edit Description" action="{!editFieldValues}" reRender="editPanelPB" onComplete="showEditPanel();" status="processStatus">
                                                                            <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!fileUpdateable}"  layout="none">
                                                                    <li >
                                                                        <apex:commandLink value="Rename" title="Rename Item" action="{!editFieldValues}" reRender="renamePanelPB" onComplete="showRenamePanel();" status="processStatus">
                                                                            <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!(shareEnabled) && NOT(isShowVersions)}"  layout="none">
                                                                    <li >
                                                                        <apex:commandLink value="Share" title="Edit Share Settings" action="{!loadShareWidget}" reRender="sharePanelPB" onComplete="showSharePanel();" status="processStatus">
                                                                            <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!fileDeletable}" layout="none">
                                                                    <li>
                                                                        <apex:commandLink value="Delete" title="Delete Item" action="{!confirmDelete}" reRender="confirmDeletePanelPB" onComplete="showConfirmDeletePanel();" status="processStatus">
                                                                            <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                            <apex:param name="attachmentContentType" value="{!f.contentType}" />
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                
                                                                <apex:outputPanel rendered="{!(f.contentType != 'Folder')}" layout="none">
                                                                    <li class="menu-seperator">
                                                                        <i class="fa fa-ellipsis-h fa-lg"></i>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                
                                                                <apex:outputPanel rendered="{!(f.contentType != 'Folder')&&(isVersionedBucket)&&NOT(isShowVersions)&&NOT(isAppleDevice) && (fileCreatable && displayUploadAndCreateButtons)}" layout="none">
                                                                    <li >
                                                                        <apex:commandLink value="Upload New Version" title="Upload New Version" reRender="uploadPanelPB" action="{!displayVersionUploadWidget}" onComplete="displayUpload();" status="processStatus">
                                                                            <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!(f.contentType != 'Folder')&&(isVersionedBucket)&&NOT(isShowVersions)&&NOT(isAppleDevice) && (fileCreatable)}" layout="none">
                                                                    <li >
                                                                        <apex:commandLink value="Previous Versions" title="Previous Versions" reRender="FileList" action="{!loadVersions}" status="processStatus" >
                                                                            <apex:param name="versionFileId" value="{!f.file.Id}" />
                                                                            <apex:param name="versionFileName" value="{!f.fileName}" />
                                                                            
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                                <apex:outputPanel rendered="{!(f.contentType != 'Folder')&&(isVersionedBucket)&&(isShowVersions)&&(f.file.Id != versionFileId)&&NOT(isAppleDevice) && (fileCreatable && fileUpdateable)}" layout="none">
                                                                    <li >
                                                                        <apex:commandLink value="Set Current" title="Set Current" reRender="FileList" action="{!copyVersionObject}" status="processStatus" onComplete="copyS3VersionFile();">
                                                                            <apex:param name="versionFileIdToCurrent" value="{!f.file.Id}" />
                                                                        </apex:commandLink>
                                                                    </li>
                                                                </apex:outputPanel>
                                                            </ul>
                                                        </span>
                                                    </div>
                                                </apex:outputPanel>
                                            </apex:column>
                                            <apex:column width="24px" headerClass="cg_sdrive_type" styleClass="list-column {! IF(f.checked, 'selected', 'deselected')}">
                                                <div align="center">
                                                    <apex:facet name="header">
                                                        <apex:outputPanel layout="block" style="text-align: center;">
                                                            <apex:commandLink value="T " title="Content Type" action="{!doSort}" status="processStatus" reRender="FileList">
                                                                <apex:param name="sortField" value="cg__Content_Type__c" assignTo="{!sortFieldAT}" />
                                                            </apex:commandLink>
                                                            <apex:image url="{!URLFOR($Resource.cg__SDriveFileIcons, 'ascending.gif')}" alt="ASC" title="Ascending" rendered="{!order == 'asc' && sortFieldAT == 'cg__Content_Type__c'}"></apex:image>
                                                            <apex:image url="{!URLFOR($Resource.cg__SDriveFileIcons, 'descending.gif')}" alt="DESC" title="Descending" rendered="{!order == 'desc' && sortFieldAT == 'cg__Content_Type__c'}"></apex:image>
                                                        </apex:outputPanel>
                                                    </apex:facet>
                                                    <apex:outputPanel rendered="{!(f.contentType == 'Folder')}">
                                                        <apex:outputLink title="{!f.fileName}" rendered="{!(f.contentType == 'Folder')}" value="javascript:loadFolderItems('{!JSINHTMLENCODE(f.file.Id)}')">
                                                            <apex:image url="{!URLFOR($Resource.cg__sources, 'file-icons/32px/' + f.iconName)}"></apex:image>
                                                        </apex:outputLink>
                                                    </apex:outputPanel>
                                                    <apex:outputPanel rendered="{!(f.contentType != 'Folder')}">
                                                        <apex:actionSupport event="onclick" action="{!downloadFile}" reRender="downloadArea">
                                                            <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                            <apex:param name="fileName" value="{!f.fileName}" />
                                                        </apex:actionSupport>
                                                        <apex:image url="{!URLFOR($Resource.cg__sources, 'file-icons/32px/' + f.iconName)}" title="{!f.contentType}"></apex:image>
                                                    </apex:outputPanel>
                                                </div>
                                            </apex:column>
                                            <apex:column width="30%" headerClass="cg_sdrive_filename" styleClass="cg_sdrive_filename_data list-column {! IF(f.checked, 'selected', 'deselected')}">
                                                <apex:facet name="header">
                                                    <apex:outputPanel layout="block">
                                                        <apex:commandLink value="{!$ObjectType.cg__S3Object__c.Fields.cg__File_Name__c.Label} " action="{!doSort}" status="processStatus" reRender="FileList">
                                                            <apex:param name="sortField" value="cg__File_Name__c" assignTo="{!sortFieldAT}" />
                                                        </apex:commandLink>
                                                        <apex:image url="{!URLFOR($Resource.cg__SDriveFileIcons, 'ascending.gif')}" alt="ASC" title="Ascending" rendered="{!order == 'asc' && sortFieldAT == 'cg__File_Name__c'}"></apex:image>
                                                        <apex:image url="{!URLFOR($Resource.cg__SDriveFileIcons, 'descending.gif')}" alt="DESC" title="Descending" rendered="{!order == 'desc' && sortFieldAT == 'cg__File_Name__c'}"></apex:image>
                                                    </apex:outputPanel>
                                                </apex:facet>
                                                <div class="ellipsis-container">
                                                    <div class="ellipsis" title="{!f.fileName}">
                                                        <apex:outputLink title="{!f.fileName}" rendered="{!(f.contentType == 'Folder')}" value="javascript:loadFolderItems('{!JSINHTMLENCODE(f.file.Id)}')" >{!f.fileName}</apex:outputLink>
                                                        <apex:commandLink title="{!f.fileName}" value="{!f.fileName}" action="{!downloadFile}" rendered="{!(f.contentType != 'Folder')}"  reRender="downloadArea">
                                                            <apex:param name="attachmentFileId" value="{!f.file.Id}" />
                                                            <apex:param name="fileName" value="{!f.fileName}" />
                                                        </apex:commandLink>
                                                        <apex:outputLabel rendered="{!(f.contentType != 'Folder')&&((isVersionedBucket)&&(isShowVersions)&&(f.file.Id == versionFileId))}" value=" (Current) "></apex:outputLabel>
                                                    </div>
                                                </div>
                                            </apex:column>
                                            <apex:repeat value="{!configuredFields}" var="field" id="customFieldRepeater">
                                                <!-- repeat over field wrappers, create a column for each of them. value="{!f.fieldValueMap[field.fieldId]}" -->
                                                <apex:column rendered="{!NOT(field.fieldType == 'TEXTAREA' || field.fieldType == 'MULTIPICKLIST')}" styleClass="list-column {! IF(f.checked, 'selected', 'deselected')}">
                                                    <apex:facet name="header">
                                                        <apex:outputPanel layout="block">
                                                            <apex:commandLink value="{!field.fieldLabel}" title="{!field.fieldLabel}" action="{!doSort}" status="processStatus" reRender="FileList">
                                                                <apex:param name="sortField" value="{!field.fieldId}" assignTo="{!sortFieldAT}"/>
                                                            </apex:commandLink>
                                                            <apex:image url="{!URLFOR($Resource.cg__SDriveFileIcons, 'ascending.gif')}" alt="ASC" title="Ascending" rendered="{!order == 'asc' && sortFieldAT == field.fieldId}"></apex:image>
                                                            <apex:image url="{!URLFOR($Resource.cg__SDriveFileIcons, 'descending.gif')}" alt="DESC" title="Descending" rendered="{!order == 'desc' && sortFieldAT == field.fieldId}"></apex:image>
                                                        </apex:outputPanel>
                                                    </apex:facet>
                                                    <div class="ellipsis-container">
                                                        <div class="ellipsis" title="{!f.file[field.fieldId]}">
                                                            <apex:outputField value="{!f.file[field.fieldId]}"></apex:outputField>
                                                        </div>
                                                    </div>
                                                </apex:column> 
                                                <apex:column headerValue="{!field.fieldLabel}" rendered="{!(field.fieldType == 'TEXTAREA' || field.fieldType == 'MULTIPICKLIST')}"  styleClass="list-column {! IF(f.checked, 'selected', 'deselected')}">
                                                    <div class="ellipsis-container">
                                                        <div class="ellipsis" title="{!f.file[field.fieldId]}">
                                                            <apex:outputField value="{!f.file[field.fieldId]}"></apex:outputField>
                                                        </div>
                                                    </div>
                                                </apex:column>
                                            </apex:repeat>
                                            <apex:column headerValue="Version Description" rendered="{!(isVersionedBucket)&&(isShowVersions)}" styleClass="list-column {! IF(f.checked, 'selected', 'deselected')}">
                                                <div class="ellipsis-container">
                                                    <div class="ellipsis" title="{!f.file['cg__Version_Description__c']}">
                                                        <apex:outputField value="{!f.file['cg__Version_Description__c']}"></apex:outputField>
                                                    </div>
                                                </div>
                                            </apex:column>
                                        </apex:pageBlockTable>
                                        
                                        <apex:outputPanel rendered="{!OR(NOT(hasFiles), ISNULL(files))}">
                                            <table class="list" style="border: 1px solid #D4DADC;">
                                                <tbody>
                                                    <tr>
                                                        <td class="infoPanel">
                                                            <i class="fa fa-info-circle fa-lg" /> <apex:outputLabel value=" No records to display" />
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </apex:outputPanel>

                                        <apex:outputPanel layout="block" id="bottomPagination" rendered="{!showPages || hasFiles || NOT(isSearchInProgress)}" styleClass="breadcrumbStyle paginationStyle paginationBottom">
                                            <span style="padding-right: 6px;"><strong>{!totalItems}</strong> items in <strong>{!pagesCount}</strong> pages </span>
                                            
                                            <apex:outputPanel onclick="cg_navigate('1')" rendered="{!(1 != pageNumAT)}" styleClass="btn"><i class="fa fa-step-backward" /></apex:outputPanel>
                                            <apex:outputPanel onclick="cg_navigate('{!pageNumAT - 1}')" rendered="{!(1 != pageNumAT)}" styleClass="btn"><i class="fa fa-caret-left fa-lg" /></apex:outputPanel>
                                            
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt > 3}">...</apex:outputPanel>
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt > 2}">
                                                <apex:outputPanel onclick="cg_navigate('{!pageNumAt - 2}')" styleClass="btn">{!pageNumAt - 2}</apex:outputPanel>
                                            </apex:outputPanel>
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt > 1}">
                                                <apex:outputPanel onclick="cg_navigate('{!pageNumAt - 1}')" styleClass="btn">{!pageNumAt - 1}</apex:outputPanel>
                                            </apex:outputPanel>
                                            
                                            <apex:selectList value="{!pageNumAT}" size="1" styleClass="btn btnSelected" onchange="cg_navigate(this.value)" rendered="{!showPages}">
                                                <apex:selectOptions value="{!pageOptions}"/>
                                            </apex:selectList>
                                            
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt < pagesCount}">
                                                <apex:outputPanel onclick="cg_navigate('{!pageNumAt + 1}')" styleClass="btn">{!pageNumAt + 1}</apex:outputPanel>
                                            </apex:outputPanel>
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt < pagesCount - 1}">
                                                <apex:outputPanel onclick="cg_navigate('{!pageNumAt + 2}')" styleClass="btn">{!pageNumAt + 2}</apex:outputPanel>
                                            </apex:outputPanel>
                                            <apex:outputPanel layout="none" rendered="{!pageNumAt < pagesCount - 2}">...</apex:outputPanel>
                                            
                                            <apex:outputPanel onclick="cg_navigate('{!pageNumAT + 1}')" rendered="{!(pagesCount != pageNumAT)}" styleClass="btn"><i class="fa fa-caret-right fa-lg" /></apex:outputPanel>
                                            <apex:outputPanel onclick="cg_navigate('{!pagesCount}')" rendered="{!(pagesCount != pageNumAT)}" styleClass="btn"><i class="fa fa-step-forward" /></apex:outputPanel>
                                        </apex:outputPanel>
                                        
                                    </apex:outputPanel>
                                </apex:outputPanel>
                            </apex:pageBlock>
                        </apex:actionRegion>
                    </apex:form>
                    <script>
                    beenFocused = true;
                    </script>
                </td>
            </tr>
        </table>
        
        <div id="responseErrors"></div>
        
        <script>
        function attachCompleted() {
            window.location.href = decodeURIComponent('{!JSENCODE($Request.returnUrl)}');
        }
        </script>
    </apex:outputPanel>
</apex:page>